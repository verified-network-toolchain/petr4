p4 program:
\n
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

header hdr {
    bit<32> a;
    bit<32> b;
    bit<8> c;
}

control compute(inout hdr h) {
    apply {
        if (h.a < h.b)
            h.c = 0;
        else
            h.c = 1;
    }
}

#include "arith-inline-skeleton.p4"
\n
\n
#       bit<32> A bit<32> B    bit<8> C
# In the output C = (A < B) ? 0 : 1

packet 0 00000000 00000000 AA
expect 0 00000000 00000000 01 $

packet 0 00000001 00000000 AA
expect 0 00000001 00000000 01 $

packet 0 00000000 00000001 AA
expect 0 00000000 00000001 00 $

packet 0 00000001 00000001 AA
expect 0 00000001 00000001 01 $

packet 0 00000011 00000022 AA
expect 0 00000011 00000022 00 $

packet 0 FFFFFFFF 00000001 AA
expect 0 FFFFFFFF 00000001 01 $
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt ffffffff0000000101

Packet matched the expected packet.
Packet:   port 0 pkt 000000110000002200

Packet matched the expected packet.
Packet:   port 0 pkt 000000010000000101

Packet matched the expected packet.
Packet:   port 0 pkt 000000000000000100

Packet matched the expected packet.
Packet:   port 0 pkt 000000010000000001

Packet matched the expected packet.
Packet:   port 0 pkt 000000000000000001
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp_uz0l3n8
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp_uz0l3n8/arith2-inline-bmv2.json /petr4/ci-test/testdata/p4_16_samples/arith2-inline-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9422 --device-id 332 -i 0@pcap0 .././tmp_uz0l3n8/arith2-inline-bmv2.json
Running simple_switch_CLI --thrift-port 9422
STF Command: packet 0 00000000 00000000 AA
STF Command: expect 0 00000000 00000000 01 $
STF Command: packet 0 00000001 00000000 AA
STF Command: expect 0 00000001 00000000 01 $
STF Command: packet 0 00000000 00000001 AA
STF Command: expect 0 00000000 00000001 00 $
STF Command: packet 0 00000001 00000001 AA
STF Command: expect 0 00000001 00000001 01 $
STF Command: packet 0 00000011 00000022 AA
STF Command: expect 0 00000011 00000022 00 $
STF Command: packet 0 FFFFFFFF 00000001 AA
STF Command: expect 0 FFFFFFFF 00000001 01 $
simple_switch exit code -15
Execution completed
Comparing outputs

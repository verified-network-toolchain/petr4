p4 program:
\n
/*
Copyright 2018 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* Similar to checksum1-bmv2.p4, but intended to test the fix for
 * issue #1630 by only having a call to verify_checksum, and none to
 * update_checksum, and testing via packets through bmv2 that only
 * verify_checksum is occurring.  Issue #1630 was that invoking one of
 * these operations automatically caused the other one to be done as
 * well. */

#include <core.p4>
#include <v1model.p4>

typedef bit<48>  EthernetAddress;
typedef bit<32>  IPv4Address;

header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header ipv4_t {
    bit<4>       version;
    bit<4>       ihl;
    bit<8>       diffserv;
    bit<16>      totalLen;
    bit<16>      identification;
    bit<3>       flags;
    bit<13>      fragOffset;
    bit<8>       ttl;
    bit<8>       protocol;
    bit<16>      hdrChecksum;
    IPv4Address  srcAddr;
    IPv4Address  dstAddr;
}

header tcp_t {
    bit<16> srcPort;
    bit<16> dstPort;
    bit<32> seqNo;
    bit<32> ackNo;
    bit<4>  dataOffset;
    bit<3>  res;
    bit<3>  ecn;
    bit<6>  ctrl;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgentPtr;
}

struct headers {
    ethernet_t    ethernet;
    ipv4_t        ipv4;
    tcp_t         tcp;
}

struct mystruct1_t {
    bit<4>  a;
    bit<4>  b;
}

struct metadata {
    mystruct1_t mystruct1;
}

typedef tuple<
    bit<4>,
    bit<4>,
    bit<8>,
    varbit<56>
    > myTuple1;

// Declare user-defined errors that may be signaled during parsing
error {
    IPv4HeaderTooShort,
    IPv4IncorrectVersion
}

parser parserI(packet_in pkt,
               out headers hdr,
               inout metadata meta,
               inout standard_metadata_t stdmeta)
{
    state start {
        pkt.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            0x0800: parse_ipv4;
            default: accept;
        }
    }
    state parse_ipv4 {
        pkt.extract(hdr.ipv4);
        verify(hdr.ipv4.version == 4w4, error.IPv4IncorrectVersion);
        verify(hdr.ipv4.ihl >= 4w5, error.IPv4HeaderTooShort);
        transition select (hdr.ipv4.protocol) {
            6: parse_tcp;
            default: accept;
        }
    }
    state parse_tcp {
        pkt.extract(hdr.tcp);
        transition accept;
    }
}

control cIngress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t stdmeta)
{
    apply {
        // Packet always goes unicast out port 0
        stdmeta.egress_spec = 0;

        if (stdmeta.checksum_error == 1) {
            // Mark the output packet in identifiable way.
            hdr.ethernet.srcAddr = 0xbad;
        }
        if (stdmeta.parser_error != error.NoError) {
            // Mark the output packet in identifiable way.
            hdr.ethernet.dstAddr = 0xbad;
        }
        // Modify a field in the IPv4 header that is included in the
        // IPv4 header checksum calculation, but intentionally _do
        // not_ update the checksum field.  We want to verify that
        // this P4 program does not update the received checksum
        // field.
        if (hdr.ipv4.isValid()) {
            hdr.ipv4.ttl = hdr.ipv4.ttl |-| 1;
        }
    }
}

control cEgress(inout headers hdr,
                inout metadata meta,
                inout standard_metadata_t stdmeta)
{
    apply { }
}

control vc(inout headers hdr,
           inout metadata meta)
{
    apply {
        verify_checksum(hdr.ipv4.isValid(),
            { hdr.ipv4.version,
                hdr.ipv4.ihl,
                hdr.ipv4.diffserv,
                hdr.ipv4.totalLen,
                hdr.ipv4.identification,
                hdr.ipv4.flags,
                hdr.ipv4.fragOffset,
                hdr.ipv4.ttl,
                hdr.ipv4.protocol,
                hdr.ipv4.srcAddr,
                hdr.ipv4.dstAddr
            },
            hdr.ipv4.hdrChecksum, HashAlgorithm.csum16);
    }
}

control uc(inout headers hdr,
           inout metadata meta)
{
    apply { }
}

control DeparserI(packet_out packet,
                  in headers hdr)
{
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv4);
        packet.emit(hdr.tcp);
    }
}

V1Switch<headers, metadata>(parserI(),
                            vc(),
                            cIngress(),
                            cEgress(),
                            uc(),
                            DeparserI()) main;
\n
\n
# Copyright 2018 Cisco Systems, Inc.

# Scapy commands that can be used to generate some of the input
# packets below.

# pkt1_bad=Ether(src='00:11:22:33:44:55', dst='66:77:88:99:aa:bb') / IP(dst='10.1.0.1') / "payload"
# pkt1_good=Ether(str(pkt1_bad))
# pkt1_bad[IP].chksum=pkt1_good[IP].chksum+1

# def str_to_hex(s):
#     return ''.join(map(lambda x: '%02x' % (ord(x)), s))

# >>> str_to_hex(str(pkt1_good))
# '66778899aabb00112233445508004500001b00010000400064d20a00020f0a0100017061796c6f6164'
# >>> str_to_hex(str(pkt1_bad))
# '66778899aabb00112233445508004500001b00010000400064d30a00020f0a0100017061796c6f6164'

######################################################################
# Verify that when an Ethernet packet with an IPv4 header is received
# with no parser errors, and a correct IPv4 header checksum, it is
# sent out with IPv4 TTL decremented, but the checksum _remains
# unchanged_, i.e. it is now wrong.

packet 0 66778899aabb 001122334455 0800  4500001b 00010000 400064d2 0a00020f 0a010001  7061796c6f6164
expect 0 66778899aabb 001122334455 0800  4500001b 00010000 3f0064d2 0a00020f 0a010001  7061796c6f6164


######################################################################
# Packet that should have a parser error, because IPv4 version is 3,
# not the 4 that is checked for via the P4 program's parser

# pkt2_bad=Ether(src='00:11:22:33:44:55', dst='66:77:88:99:aa:bb') / IP(dst='10.1.0.1') / "payload"
# pkt2_bad[IP].version=3
# str_to_hex(str(pkt2_bad))

packet 0 66778899aabb 001122334455 0800  3500001b 00010000 400074d2 0a00020f 0a010001  7061796c6f6164
# TTL decremented, dest MAC address replaced with 0xbad because of
# parser error detected.
expect 0 000000000bad 001122334455 0800  3500001b 00010000 3f0074d2 0a00020f 0a010001  7061796c6f6164


######################################################################
# Packet that has a wrong IPv4 header checksum when received, which
# should be detected by the program, _but not corrected_.

# See commands to create pkt1_bad above

packet 0 66778899aabb 001122334455 0800  4500001b 00010000 400064d3 0a00020f 0a010001  7061796c6f6164
# TTL decremented, source MAC address replaced with 0xbad because of
# incorrect received checksum detected.
expect 0 66778899aabb 000000000bad 0800  4500001b 00010000 3f0064d3 0a00020f 0a010001  7061796c6f6164
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 66778899aabb000000000bad08004500001b000100003f0064d30a00020f0a0100017061796c6f6164

Packet matched the expected packet.
Packet:   port 0 pkt 000000000bad00112233445508003500001b000100003f0074d20a00020f0a0100017061796c6f6164

Packet matched the expected packet.
Packet:   port 0 pkt 66778899aabb00112233445508004500001b000100003f0064d20a00020f0a0100017061796c6f6164
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp3bwl2pfe
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp3bwl2pfe/checksum2-bmv2.json /petr4/ci-test/testdata/p4_16_samples/checksum2-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9210 --device-id 120 -i 0@pcap0 .././tmp3bwl2pfe/checksum2-bmv2.json
Running simple_switch_CLI --thrift-port 9210
STF Command: packet 0 66778899aabb 001122334455 0800  4500001b 00010000 400064d2 0a00020f 0a010001  7061796c6f6164
STF Command: expect 0 66778899aabb 001122334455 0800  4500001b 00010000 3f0064d2 0a00020f 0a010001  7061796c6f6164
STF Command: packet 0 66778899aabb 001122334455 0800  3500001b 00010000 400074d2 0a00020f 0a010001  7061796c6f6164
STF Command: expect 0 000000000bad 001122334455 0800  3500001b 00010000 3f0074d2 0a00020f 0a010001  7061796c6f6164
STF Command: packet 0 66778899aabb 001122334455 0800  4500001b 00010000 400064d3 0a00020f 0a010001  7061796c6f6164
STF Command: expect 0 66778899aabb 000000000bad 0800  4500001b 00010000 3f0064d3 0a00020f 0a010001  7061796c6f6164
simple_switch exit code -15
Execution completed
Comparing outputs

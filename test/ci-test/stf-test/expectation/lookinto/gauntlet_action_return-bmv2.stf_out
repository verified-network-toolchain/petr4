p4 program:
\n
#include <core.p4>
#include <v1model.p4>

header ethernet_t {
    bit<48> dst_addr;
    bit<48> src_addr;
    bit<16> eth_type;
}

header H {
    bit<8>  a;
}

struct Headers {
    ethernet_t eth_hdr;
    H    h;
}

struct Meta {}

control ingress(inout Headers h, inout Meta m, inout standard_metadata_t sm) {
    bit<128> tmp_key = 128w2;
    action do_action(inout bit<8> val) {
        if (val > 8w10) {
            val = 8w2;
            return;
        } else{
            val = 8w3;
        }

        return;
        val = 8w4;
    }
    table simple_table {
        key = {
            tmp_key             : exact @name("bKiScA") ;
        }
        actions = {
            do_action(h.h.a);
        }
    }
    apply {
        simple_table.apply();
    }
}

parser p(packet_in pkt, out Headers hdr, inout Meta m, inout standard_metadata_t sm) {
    state start {
        transition parse_hdrs;
    }
    state parse_hdrs {
        pkt.extract(hdr.eth_hdr);
        pkt.extract(hdr.h);
        transition accept;
    }
}

control vrfy(inout Headers h, inout Meta m) { apply {} }

control update(inout Headers h, inout Meta m) { apply {} }

control egress(inout Headers h, inout Meta m, inout standard_metadata_t sm) { apply {} }

control deparser(packet_out pkt, in Headers h) {
    apply {
        pkt.emit(h);
    }
}
V1Switch(p(), vrfy(), ingress(), egress(), update(), deparser()) main;

\n
\n
packet 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1B
expect 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1B
packet 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13
expect 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13
packet 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0B
expect 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0B
packet 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03
expect 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 000000000000000000000000000003

Packet matched the expected packet.
Packet:   port 0 pkt 00000000000000000000000000000b

Packet matched the expected packet.
Packet:   port 0 pkt 000000000000000000000000000013

Packet matched the expected packet.
Packet:   port 0 pkt 00000000000000000000000000001b
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp_n181cge
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp_n181cge/gauntlet_action_return-bmv2.json /petr4/ci-test/testdata/p4_16_samples/gauntlet_action_return-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9115 --device-id 25 -i 0@pcap0 .././tmp_n181cge/gauntlet_action_return-bmv2.json
Running simple_switch_CLI --thrift-port 9115
STF Command: packet 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1B
STF Command: expect 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1B
STF Command: packet 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13
STF Command: expect 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13
STF Command: packet 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0B
STF Command: expect 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0B
STF Command: packet 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03
STF Command: expect 0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03
simple_switch exit code -15
Execution completed
Comparing outputs

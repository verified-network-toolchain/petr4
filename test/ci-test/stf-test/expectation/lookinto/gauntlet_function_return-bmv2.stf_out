p4 program:
\n
#include <core.p4>
#include <v1model.p4>

header H {
    bit<8>  a;
}

struct Headers {
    H h;
}

struct Meta {
}

bit<8> do_thing(out bit<32> d) {
    return (bit<8>)32w1;
}
control ingress(inout Headers h, inout Meta m, inout standard_metadata_t sm) {
    action action_thing(inout bit<32> c) {
        c = (bit<32>)do_thing(c);
    }
    apply {
        action_thing(sm.enq_timestamp);
    }
}

parser p(packet_in b, out Headers h, inout Meta m, inout standard_metadata_t sm) {
state start {transition accept;}}

control vrfy(inout Headers h, inout Meta m) { apply {} }

control update(inout Headers h, inout Meta m) { apply {} }

control egress(inout Headers h, inout Meta m, inout standard_metadata_t sm) { apply {} }

control deparser(packet_out pkt, in Headers h) {
    apply {
        pkt.emit(h);
    }
}
V1Switch(p(), vrfy(), ingress(), egress(), update(), deparser()) main;

\n
\n
packet 0 00
expect 0 00
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 00
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp9d8lo_f0
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp9d8lo_f0/gauntlet_function_return-bmv2.json /petr4/ci-test/testdata/p4_16_samples/gauntlet_function_return-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9830 --device-id 740 -i 0@pcap0 .././tmp9d8lo_f0/gauntlet_function_return-bmv2.json
Running simple_switch_CLI --thrift-port 9830
STF Command: packet 0 00
STF Command: expect 0 00
simple_switch exit code -15
Execution completed
Comparing outputs

p4 program:
\n
/*
Copyright 2017 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include <core.p4>
#include <v1model.p4>

header h1_t {
    bit<8>  hdr_type;
    bit<8>  op1;
    bit<8>  op2;
    bit<8>  op3;
    bit<8>  h2_valid_bits;
    bit<8>  next_hdr_type;
}

header h2_t {
    bit<8>  hdr_type;
    bit<8>  f1;
    bit<8>  f2;
    bit<8>  next_hdr_type;
}

header h3_t {
    bit<8>  hdr_type;
    bit<8>  data;
}

#define MAX_H2_HEADERS 5

struct headers {
    h1_t h1;
    h2_t[MAX_H2_HEADERS] h2;
    h3_t h3;
}

struct metadata {
}

error {
    BadHeaderType
}

parser parserI(packet_in pkt,
               out headers hdr,
               inout metadata meta,
               inout standard_metadata_t stdmeta)
{
    state start {
        pkt.extract(hdr.h1);
        verify(hdr.h1.hdr_type == 1, error.BadHeaderType);
        transition select(hdr.h1.next_hdr_type) {
            2: parse_h2;
            3: parse_h3;
            default: accept;
        }
    }
    state parse_h2 {
        pkt.extract(hdr.h2.next);
        verify(hdr.h2.last.hdr_type == 2, error.BadHeaderType);
        transition select(hdr.h2.last.next_hdr_type) {
            2: parse_h2;
            3: parse_h3;
            default: accept;
        }
    }
    state parse_h3 {
        pkt.extract(hdr.h3);
        verify(hdr.h3.hdr_type == 3, error.BadHeaderType);
        transition accept;
    }
}

control cDoOneOp(inout headers hdr,
                 in bit<8> op)
{
    apply {
        if (op == 0x00) {
            // nop
        } else if (op[7:4] == 1) {
            // push_front
            if (op[3:0] == 1) {
                hdr.h2.push_front(1);
            } else if (op[3:0] == 2) {
                hdr.h2.push_front(2);
            } else if (op[3:0] == 3) {
                hdr.h2.push_front(3);
            } else if (op[3:0] == 4) {
                hdr.h2.push_front(4);
            } else if (op[3:0] == 5) {
                hdr.h2.push_front(5);
            } else if (op[3:0] == 6) {
                hdr.h2.push_front(6);
            }
        } else if (op[7:4] == 2) {
            // pop_front
            if (op[3:0] == 1) {
                hdr.h2.pop_front(1);
            } else if (op[3:0] == 2) {
                hdr.h2.pop_front(2);
            } else if (op[3:0] == 3) {
                hdr.h2.pop_front(3);
            } else if (op[3:0] == 4) {
                hdr.h2.pop_front(4);
            } else if (op[3:0] == 5) {
                hdr.h2.pop_front(5);
            } else if (op[3:0] == 6) {
                hdr.h2.pop_front(6);
            }
        } else if (op[7:4] == 3) {
            // setValid
            if (op[3:0] == 0) {
                hdr.h2[0].setValid();
                hdr.h2[0].hdr_type = 2;
                hdr.h2[0].f1 = 0xa0;
                hdr.h2[0].f2 = 0x0a;
                hdr.h2[0].next_hdr_type = 9;
            } else if (op[3:0] == 1) {
                hdr.h2[1].setValid();
                hdr.h2[1].hdr_type = 2;
                hdr.h2[1].f1 = 0xa1;
                hdr.h2[1].f2 = 0x1a;
                hdr.h2[1].next_hdr_type = 9;
            } else if (op[3:0] == 2) {
                hdr.h2[2].setValid();
                hdr.h2[2].hdr_type = 2;
                hdr.h2[2].f1 = 0xa2;
                hdr.h2[2].f2 = 0x2a;
                hdr.h2[2].next_hdr_type = 9;
            } else if (op[3:0] == 3) {
                hdr.h2[3].setValid();
                hdr.h2[3].hdr_type = 2;
                hdr.h2[3].f1 = 0xa3;
                hdr.h2[3].f2 = 0x3a;
                hdr.h2[3].next_hdr_type = 9;
            } else if (op[3:0] == 4) {
                hdr.h2[4].setValid();
                hdr.h2[4].hdr_type = 2;
                hdr.h2[4].f1 = 0xa4;
                hdr.h2[4].f2 = 0x4a;
                hdr.h2[4].next_hdr_type = 9;
            }
        } else if (op[7:4] == 4) {
            // setInvalid
            if (op[3:0] == 0) {
                hdr.h2[0].setInvalid();
            } else if (op[3:0] == 1) {
                hdr.h2[1].setInvalid();
            } else if (op[3:0] == 2) {
                hdr.h2[2].setInvalid();
            } else if (op[3:0] == 3) {
                hdr.h2[3].setInvalid();
            } else if (op[3:0] == 4) {
                hdr.h2[4].setInvalid();
            }
        }
    }
}

control cIngress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t stdmeta)
{
    cDoOneOp() do_one_op;
    apply {
        do_one_op.apply(hdr, hdr.h1.op1);
        do_one_op.apply(hdr, hdr.h1.op2);
        do_one_op.apply(hdr, hdr.h1.op3);

        // Record valid bits of all headers in hdr.h1.h2_valid_bits
        // output header field, so we can easily write unit tests that
        // check whether they have the expected values.
        hdr.h1.h2_valid_bits = 0;
        if (hdr.h2[0].isValid()) {
            hdr.h1.h2_valid_bits[0:0] = 1;
        }
        if (hdr.h2[1].isValid()) {
            hdr.h1.h2_valid_bits[1:1] = 1;
        }
        if (hdr.h2[2].isValid()) {
            hdr.h1.h2_valid_bits[2:2] = 1;
        }
        if (hdr.h2[3].isValid()) {
            hdr.h1.h2_valid_bits[3:3] = 1;
        }
        if (hdr.h2[4].isValid()) {
            hdr.h1.h2_valid_bits[4:4] = 1;
        }
    }
}

control cEgress(inout headers hdr,
                inout metadata meta,
                inout standard_metadata_t stdmeta)
{
    apply { }
}

control vc(inout headers hdr,
           inout metadata meta)
{
    apply { }
}

control uc(inout headers hdr,
           inout metadata meta)
{
    apply { }
}

control DeparserI(packet_out packet,
                  in headers hdr)
{
    apply {
        packet.emit(hdr.h1);
        packet.emit(hdr.h2);
        packet.emit(hdr.h3);
    }
}

V1Switch(parserI(),
         vc(),
         cIngress(),
         cEgress(),
         uc(),
         DeparserI()) main;
\n
\n
# Here are abbreviated names for several versions of behavioral-model
# simple_switch referred to below:

# v1 - The 'original' version.

# v2 - Version 1.10.0 compiled without enabling support for P4_16
# header stacks, i.e. without supplying the command line option
# '--enable-WP4-16-stacks' when running 'configure'.

# v3 - Version 1.10.0 compiled _with_ enabling support for P4_16
# header stacks, i.e.  supplying the command line option
# '--enable-WP4-16-stacks' when running 'configure'.

######################################################################
# v1 - The 'original' version, before any changes were made to the
# behavior of push and pop primitives (those are the names in the BMv2
# JSON file for the push_front and pop_front methods in the P4_16
# language spec).
#
# Corresponds to this commit of repository
# https://github.com/p4lang/behavioral-model
#
# commit 9e4a70edbd7255cd0e00e92acc2c7e131cedeaf7
# Author: Antonin Bas <antonin@barefootnetworks.com>
# Date:   Tue Jan 2 10:33:08 2018 -0800
# 
#     Call export_bytes in Data::two_comp_mod operator
#
######################################################################
#
# v2 and v3 both use this version of the source code of the
# p4lang/behavioral-model Github repo:
#
# commit 6b5d99c54198102d11871a92a71d80e6958a0295
# Author: Antonin Bas <antonin@barefootnetworks.com>
# Date:   Thu Jan 4 10:26:42 2018 -0800
# 
#     changed VERSION number to 1.10.0 for release
#
######################################################################


# packet with 3 no-ops should pass through unchanged, except for
# h1.h2_valid_bits in output packet

packet 0  01 00 00 00 00 02   02 de ad 03   03 be
# v1 v2 v3
expect 0  01 00 00 00 01 02   02 de ad 03   03 be


# This one has an operation to push 1 header into h2 stack, but not
# otherwise change any valid bits, so 1 header should come out, but
# internally it should be h2[1], not h2[0], so h1.h2_valid_bits should
# be slightly different.
#
# Note 1: Due to p4c issue #1128, where it is not copying the 'next'
# state for header stacks when calling sub-controls, and because of
# the way bmv2 v1 depends on the value of 'next' in its 'push'
# primitive behavior, it incorrectly generates h2_valid_bits=1 in the
# output packet.

packet 0  01 11 00 00 00 02   02 de ad 03   03 be
# v1 v2
#expect 0  01 11 00 00 01 02   02 de ad 03   03 be
# v3
expect 0  01 11 00 00 02 02   02 de ad 03   03 be


# push_front(1) then fill in new h2[0].  2 h2 headers should come out.
#
# Incorrect output packet for v1 and v2 because same reason as at Note
# 1.
#
# v3 gives correct output packet according to P4_16 language spec.

packet 0  01 11 30 00 00 02   02 de ad 03   03 be
# v1
#expect 0  01 11 30 00 01 02   02 a0 0a 09   03 be
# v3
expect 0  01 11 30 00 03 02   02 a0 0a 09   02 de ad 03   03 be


# Only operation is to make hdr[2] valid and fill it in.  This
# intentionally creates a 'hole', but emit should include it in
# output.

packet 0  01 32 00 00 00 02   02 de ad 03   03 be
# v1 v2 v3
expect 0  01 32 00 00 05 02   02 de ad 03   02 a2 2a 09   03 be


# Like previous case, but also do a push_front(1) after
# hdr.h2[2].setValid().
#
# Incorrect output packet for v1 and v2 because same reason as at Note
# 1.
#
# v3 gives correct output packet according to P4_16 language spec.

packet 0  01 32 11 00 00 02   02 de ad 03   03 be
# v1 v2
#expect 0  01 32 11 00 05 02   02 de ad 03   02 a2 2a 09   03 be
# v3
expect 0  01 32 11 00 0a 02   02 de ad 03   02 a2 2a 09   03 be


# receive no h2 headers in input packet.  Make h2[0] valid and fill it
# in.  pop_front(1) should remove it before it goes out.
#
# Incorrect output packet for v1 and v2 because same reason as at Note
# 1.  Because 'next' is 0 instead of 1, pop_front(1) is a no-op.

packet 0  01 30 21 00 00 03   03 be
# v1 v2
#expect 0  01 30 21 00 01 03   02 a0 0a 09    03 be
# v3
expect 0  01 30 21 00 00 03   03 be



# Receive 5 valid h2 headers, send through without changing
packet 0  01 00 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
expect 0  01 00 00 00 1f 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe


# Receive 5 valid h2 headers, push_front(1), fill in new h2[0], 5 valid h2 out
packet 0  01 11 30 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
expect 0  01 11 30 00 1f 02   02 a0 0a 09   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   03 fe


# Receive 5 valid h2 headers, push_front(4), make none valid, 1 valid h2 out
packet 0  01 14 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
expect 0  01 14 00 00 10 02   02 12 34 02   03 fe


# Receive 5 valid h2 headers, push_front(5), make none valid, 0 valid h2 out
packet 0  01 15 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
expect 0  01 15 00 00 00 02   03 fe


# Receive 5 valid h2 headers, pop_front(1), 4 valid h2 headers out
packet 0  01 21 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
expect 0  01 21 00 00 0f 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe


# Receive 5 valid h2 headers, pop_front(4), 1 valid h2 header out
packet 0  01 24 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
expect 0  01 24 00 00 01 02   02 23 45 03   03 fe


# Receive 5 valid h2 headers, pop_front(5), 0 valid h2 headers out
packet 0  01 25 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
expect 0  01 25 00 00 00 02   03 fe


# Receive 3 valid h2 headers, make h2[3] valid and fill in, push_front(1), 4 out
packet 0  01 33 11 00 00 02   02 12 34 02   02 56 78 02   02 23 45 03   03 fe
expect 0  01 33 11 00 1e 02   02 12 34 02   02 56 78 02   02 23 45 03   02 a3 3a 09   03 fe


# Receive 3 valid h2 headers, make h2[3] valid and fill in, pop_front(1), 3 out
packet 0  01 33 21 00 00 02   02 12 34 02   02 56 78 02   02 23 45 03   03 fe
expect 0  01 33 21 00 07 02   02 56 78 02   02 23 45 03   02 a3 3a 09   03 fe
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 013321000702025678020223450302a33a0903fe

Packet matched the expected packet.
Packet:   port 0 pkt 013311001e0202123402025678020223450302a33a0903fe

Packet matched the expected packet.
Packet:   port 0 pkt 01250000000203fe

Packet matched the expected packet.
Packet:   port 0 pkt 0124000001020223450303fe

Packet matched the expected packet.
Packet:   port 0 pkt 012100000f0202567802029abc0202def1020223450303fe

Packet matched the expected packet.
Packet:   port 0 pkt 01150000000203fe

Packet matched the expected packet.
Packet:   port 0 pkt 0114000010020212340203fe

Packet matched the expected packet.
Packet:   port 0 pkt 011130001f0202a00a090212340202567802029abc0202def10203fe

Packet matched the expected packet.
Packet:   port 0 pkt 010000001f020212340202567802029abc0202def1020223450303fe

Packet matched the expected packet.
Packet:   port 0 pkt 01302100000303be

Packet matched the expected packet.
Packet:   port 0 pkt 013211000a0202dead0302a22a0903be

Packet matched the expected packet.
Packet:   port 0 pkt 01320000050202dead0302a22a0903be

Packet matched the expected packet.
Packet:   port 0 pkt 01113000030202a00a0902dead0303be

Packet matched the expected packet.
Packet:   port 0 pkt 01110000020202dead0303be

Packet matched the expected packet.
Packet:   port 0 pkt 01000000010202dead0303be
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp5_a6nyqy
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp5_a6nyqy/header-stack-ops-bmv2.json /petr4/ci-test/testdata/p4_16_samples/header-stack-ops-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9190 --device-id 100 -i 0@pcap0 .././tmp5_a6nyqy/header-stack-ops-bmv2.json
Running simple_switch_CLI --thrift-port 9190
STF Command: packet 0  01 00 00 00 00 02   02 de ad 03   03 be
STF Command: expect 0  01 00 00 00 01 02   02 de ad 03   03 be
STF Command: packet 0  01 11 00 00 00 02   02 de ad 03   03 be
STF Command: expect 0  01 11 00 00 02 02   02 de ad 03   03 be
STF Command: packet 0  01 11 30 00 00 02   02 de ad 03   03 be
STF Command: expect 0  01 11 30 00 03 02   02 a0 0a 09   02 de ad 03   03 be
STF Command: packet 0  01 32 00 00 00 02   02 de ad 03   03 be
STF Command: expect 0  01 32 00 00 05 02   02 de ad 03   02 a2 2a 09   03 be
STF Command: packet 0  01 32 11 00 00 02   02 de ad 03   03 be
STF Command: expect 0  01 32 11 00 0a 02   02 de ad 03   02 a2 2a 09   03 be
STF Command: packet 0  01 30 21 00 00 03   03 be
STF Command: expect 0  01 30 21 00 00 03   03 be
STF Command: packet 0  01 00 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: expect 0  01 00 00 00 1f 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: packet 0  01 11 30 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: expect 0  01 11 30 00 1f 02   02 a0 0a 09   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   03 fe
STF Command: packet 0  01 14 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: expect 0  01 14 00 00 10 02   02 12 34 02   03 fe
STF Command: packet 0  01 15 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: expect 0  01 15 00 00 00 02   03 fe
STF Command: packet 0  01 21 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: expect 0  01 21 00 00 0f 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: packet 0  01 24 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: expect 0  01 24 00 00 01 02   02 23 45 03   03 fe
STF Command: packet 0  01 25 00 00 00 02   02 12 34 02   02 56 78 02   02 9a bc 02   02 de f1 02   02 23 45 03   03 fe
STF Command: expect 0  01 25 00 00 00 02   03 fe
STF Command: packet 0  01 33 11 00 00 02   02 12 34 02   02 56 78 02   02 23 45 03   03 fe
STF Command: expect 0  01 33 11 00 1e 02   02 12 34 02   02 56 78 02   02 23 45 03   02 a3 3a 09   03 fe
STF Command: packet 0  01 33 21 00 00 02   02 12 34 02   02 56 78 02   02 23 45 03   03 fe
STF Command: expect 0  01 33 21 00 07 02   02 56 78 02   02 23 45 03   02 a3 3a 09   03 fe
simple_switch exit code -15
Execution completed
Comparing outputs

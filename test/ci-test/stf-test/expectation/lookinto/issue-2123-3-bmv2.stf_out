p4 program:
\n
/*
 * Copyright 2020, MNK Labs & Consulting
 * http://mnkcg.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <v1model.p4>

header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header h0_t {
    bit<8>  f0;
}

header h1_t {
    bit<8>  f1;
}

header h2_t {
    bit<8>  f2;
}

header h3_t {
    bit<8>  f3;
}

header h4_t {
    bit<8>  f4;
}

struct metadata {
}

struct headers {
    ethernet_t ethernet;
    h0_t       h0;
    h1_t       h1;
    h2_t       h2;
    h3_t       h3;
    h4_t       h4;
}

parser ParserImpl(
    packet_in packet,
    out headers hdr,
    inout metadata meta,
    inout standard_metadata_t standard_metadata)
{
    state start {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.srcAddr[7:0], hdr.ethernet.etherType) {
            (0x61 .. 0x67, 0x0800 .. 0x0806): parse_h0;
            (0x61 .. 0x67, 0x0901 .. 0x0902): parse_h1;
            (0x77 .. 0x7b, 0x0801 .. 0x0806): parse_h2;
            (0x77 .. 0x7b, 0x0a00 .. 0x0aaa): parse_h3;
            (           _, 0x0a00 .. 0x0aaa): parse_h4;
            default: accept;
        }
    }
    state parse_h0 {
        packet.extract(hdr.h0);
        transition accept;
    }
    state parse_h1 {
        packet.extract(hdr.h1);
        transition accept;
    }
    state parse_h2 {
        packet.extract(hdr.h2);
        transition accept;
    }
    state parse_h3 {
        packet.extract(hdr.h3);
        transition accept;
    }
    state parse_h4 {
        packet.extract(hdr.h4);
        transition accept;
    }
}

control ingress(
    inout headers hdr,
    inout metadata meta,
    inout standard_metadata_t standard_metadata)
{
    apply {
        // Overwrite some bits of one of the header fields so that in
        // the STF test we can match on the output packet contents and
        // know which case was taken in the select expression in the
        // parser.
        hdr.ethernet.dstAddr[44:44] = hdr.h4.isValid() ? 1w1 : 0;
        hdr.ethernet.dstAddr[43:43] = hdr.h3.isValid() ? 1w1 : 0;
        hdr.ethernet.dstAddr[42:42] = hdr.h2.isValid() ? 1w1 : 0;
        hdr.ethernet.dstAddr[41:41] = hdr.h1.isValid() ? 1w1 : 0;
        hdr.ethernet.dstAddr[40:40] = hdr.h0.isValid() ? 1w1 : 0;

        standard_metadata.egress_spec = 3;
    }
}

control egress(
    inout headers hdr,
    inout metadata meta,
    inout standard_metadata_t standard_metadata)
{
    apply {
    }
}

control DeparserImpl(
    packet_out packet,
    in headers hdr)
{
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.h0);
        packet.emit(hdr.h1);
        packet.emit(hdr.h2);
        packet.emit(hdr.h3);
        packet.emit(hdr.h4);
    }
}

control verifyChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

control computeChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

V1Switch(
    ParserImpl(),
    verifyChecksum(),
    ingress(),
    egress(),
    computeChecksum(),
    DeparserImpl())
main;
\n
\n
# For pairs of fields, I will only do all four "corners" and 8 "just
# outside the corners" values in the tests for one of the cases of the
# select expression.  I lack the patience to do that for all of the
# cases, nor do I care to write a program to do that for me right now.

# Recall that another good way to verify that the compiler is
# producing the correct code is to examine the P4_16 code output from
# the last mid end pass of the compiler, and check that by hand.

# go to parse_h0
packet 1 ffffffffffff ffffffffff61 0800 00
expect 3 e1ffffffffff ffffffffff61 0800 00 $

packet 1 ffffffffffff ffffffffff61 0806 00
expect 3 e1ffffffffff ffffffffff61 0806 00 $

packet 1 ffffffffffff ffffffffff67 0800 00
expect 3 e1ffffffffff ffffffffff67 0800 00 $

packet 1 ffffffffffff ffffffffff67 0806 00
expect 3 e1ffffffffff ffffffffff67 0806 00 $

# Just outside of the four corners of parse_h0, all of which should
# match the default case of the select expression.

packet 1 ffffffffffff ffffffffff60 0800 00
expect 3 e0ffffffffff ffffffffff60 0800 00 $

packet 1 ffffffffffff ffffffffff60 0806 00
expect 3 e0ffffffffff ffffffffff60 0806 00 $

packet 1 ffffffffffff ffffffffff68 0800 00
expect 3 e0ffffffffff ffffffffff68 0800 00 $

packet 1 ffffffffffff ffffffffff68 0806 00
expect 3 e0ffffffffff ffffffffff68 0806 00 $

packet 1 ffffffffffff ffffffffff61 07ff 00
expect 3 e0ffffffffff ffffffffff61 07ff 00 $

packet 1 ffffffffffff ffffffffff67 07ff 00
expect 3 e0ffffffffff ffffffffff67 07ff 00 $

packet 1 ffffffffffff ffffffffff61 0807 00
expect 3 e0ffffffffff ffffffffff61 0807 00 $

packet 1 ffffffffffff ffffffffff67 0807 00
expect 3 e0ffffffffff ffffffffff67 0807 00 $

# These should match case parse_h1
packet 1 ffffffffffff ffffffffff61 0901 00
expect 3 e2ffffffffff ffffffffff61 0901 00 $

packet 1 ffffffffffff ffffffffff67 0902 00
expect 3 e2ffffffffff ffffffffff67 0902 00 $

# default
packet 1 ffffffffffff ffffffffff61 0900 00
expect 3 e0ffffffffff ffffffffff61 0900 00 $

packet 1 ffffffffffff ffffffffff67 0903 00
expect 3 e0ffffffffff ffffffffff67 0903 00 $

# parse_h2
packet 1 ffffffffffff ffffffffff7b 0804 00
expect 3 e4ffffffffff ffffffffff7b 0804 00 $

packet 1 ffffffffffff ffffffffff77 0803 00
expect 3 e4ffffffffff ffffffffff77 0803 00 $

# parse_h3
packet 1 ffffffffffff ffffffffff79 0a23 00
expect 3 e8ffffffffff ffffffffff79 0a23 00 $

packet 1 ffffffffffff ffffffffff7a 0a99 00
expect 3 e8ffffffffff ffffffffff7a 0a99 00 $

# parse_h4
packet 1 ffffffffffff ffffffffff00 0a11 00
expect 3 f0ffffffffff ffffffffff00 0a11 00 $

packet 1 ffffffffffff ffffffffffff 0a88 00
expect 3 f0ffffffffff ffffffffffff 0a88 00 $
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 3 pkt f0ffffffffffffffffffffff0a8800

Packet matched the expected packet.
Packet:   port 3 pkt f0ffffffffffffffffffff000a1100

Packet matched the expected packet.
Packet:   port 3 pkt e8ffffffffffffffffffff7a0a9900

Packet matched the expected packet.
Packet:   port 3 pkt e8ffffffffffffffffffff790a2300

Packet matched the expected packet.
Packet:   port 3 pkt e4ffffffffffffffffffff77080300

Packet matched the expected packet.
Packet:   port 3 pkt e4ffffffffffffffffffff7b080400

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff67090300

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff61090000

Packet matched the expected packet.
Packet:   port 3 pkt e2ffffffffffffffffffff67090200

Packet matched the expected packet.
Packet:   port 3 pkt e2ffffffffffffffffffff61090100

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff67080700

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff61080700

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff6707ff00

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff6107ff00

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff68080600

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff68080000

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff60080600

Packet matched the expected packet.
Packet:   port 3 pkt e0ffffffffffffffffffff60080000

Packet matched the expected packet.
Packet:   port 3 pkt e1ffffffffffffffffffff67080600

Packet matched the expected packet.
Packet:   port 3 pkt e1ffffffffffffffffffff67080000

Packet matched the expected packet.
Packet:   port 3 pkt e1ffffffffffffffffffff61080600

Packet matched the expected packet.
Packet:   port 3 pkt e1ffffffffffffffffffff61080000
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap1 as port 1 (files)
Adding interface pcap3 as port 3 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp2nrj3jx6
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp2nrj3jx6/issue-2123-3-bmv2.json /petr4/ci-test/testdata/p4_16_samples/issue-2123-3-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 10077 --device-id 987 -i 1@pcap1 -i 3@pcap3 .././tmp2nrj3jx6/issue-2123-3-bmv2.json
Running simple_switch_CLI --thrift-port 10077
STF Command: packet 1 ffffffffffff ffffffffff61 0800 00
STF Command: expect 3 e1ffffffffff ffffffffff61 0800 00 $
STF Command: packet 1 ffffffffffff ffffffffff61 0806 00
STF Command: expect 3 e1ffffffffff ffffffffff61 0806 00 $
STF Command: packet 1 ffffffffffff ffffffffff67 0800 00
STF Command: expect 3 e1ffffffffff ffffffffff67 0800 00 $
STF Command: packet 1 ffffffffffff ffffffffff67 0806 00
STF Command: expect 3 e1ffffffffff ffffffffff67 0806 00 $
STF Command: packet 1 ffffffffffff ffffffffff60 0800 00
STF Command: expect 3 e0ffffffffff ffffffffff60 0800 00 $
STF Command: packet 1 ffffffffffff ffffffffff60 0806 00
STF Command: expect 3 e0ffffffffff ffffffffff60 0806 00 $
STF Command: packet 1 ffffffffffff ffffffffff68 0800 00
STF Command: expect 3 e0ffffffffff ffffffffff68 0800 00 $
STF Command: packet 1 ffffffffffff ffffffffff68 0806 00
STF Command: expect 3 e0ffffffffff ffffffffff68 0806 00 $
STF Command: packet 1 ffffffffffff ffffffffff61 07ff 00
STF Command: expect 3 e0ffffffffff ffffffffff61 07ff 00 $
STF Command: packet 1 ffffffffffff ffffffffff67 07ff 00
STF Command: expect 3 e0ffffffffff ffffffffff67 07ff 00 $
STF Command: packet 1 ffffffffffff ffffffffff61 0807 00
STF Command: expect 3 e0ffffffffff ffffffffff61 0807 00 $
STF Command: packet 1 ffffffffffff ffffffffff67 0807 00
STF Command: expect 3 e0ffffffffff ffffffffff67 0807 00 $
STF Command: packet 1 ffffffffffff ffffffffff61 0901 00
STF Command: expect 3 e2ffffffffff ffffffffff61 0901 00 $
STF Command: packet 1 ffffffffffff ffffffffff67 0902 00
STF Command: expect 3 e2ffffffffff ffffffffff67 0902 00 $
STF Command: packet 1 ffffffffffff ffffffffff61 0900 00
STF Command: expect 3 e0ffffffffff ffffffffff61 0900 00 $
STF Command: packet 1 ffffffffffff ffffffffff67 0903 00
STF Command: expect 3 e0ffffffffff ffffffffff67 0903 00 $
STF Command: packet 1 ffffffffffff ffffffffff7b 0804 00
STF Command: expect 3 e4ffffffffff ffffffffff7b 0804 00 $
STF Command: packet 1 ffffffffffff ffffffffff77 0803 00
STF Command: expect 3 e4ffffffffff ffffffffff77 0803 00 $
STF Command: packet 1 ffffffffffff ffffffffff79 0a23 00
STF Command: expect 3 e8ffffffffff ffffffffff79 0a23 00 $
STF Command: packet 1 ffffffffffff ffffffffff7a 0a99 00
STF Command: expect 3 e8ffffffffff ffffffffff7a 0a99 00 $
STF Command: packet 1 ffffffffffff ffffffffff00 0a11 00
STF Command: expect 3 f0ffffffffff ffffffffff00 0a11 00 $
STF Command: packet 1 ffffffffffff ffffffffffff 0a88 00
STF Command: expect 3 f0ffffffffff ffffffffffff 0a88 00 $
simple_switch exit code -15
Execution completed
Comparing outputs

p4 program:
\n
/*
Copyright 2017 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include <core.p4>
#include <v1model.p4>

typedef bit<48>  EthernetAddress;
typedef bit<32>  IPv4Address;

header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

// IPv4 header _with_ options
header ipv4_t {
    bit<4>       version;
    bit<4>       ihl;
    bit<8>       diffserv;
    bit<16>      totalLen;
    bit<16>      identification;
    bit<3>       flags;
    bit<13>      fragOffset;
    bit<8>       ttl;
    bit<8>       protocol;
    bit<16>      hdrChecksum;
    IPv4Address  srcAddr;
    IPv4Address  dstAddr;
    // This is significantly shorter than the IPv4 specification
    // allows for options.  It is written this way specifically to
    // make it easier to write an STF test case that exhibits the bug
    // described in p4c issue #1025.
    varbit<32>   options;
}

header tcp_t {
    bit<16> srcPort;
    bit<16> dstPort;
    bit<32> seqNo;
    bit<32> ackNo;
    bit<4>  dataOffset;
    bit<3>  res;
    bit<3>  ecn;
    bit<6>  ctrl;
    bit<16> window;
    bit<16> checksum;
    bit<16> urgentPtr;
}

header IPv4_up_to_ihl_only_h {
    bit<4>       version;
    bit<4>       ihl;
}

struct headers {
    ethernet_t    ethernet;
    ipv4_t        ipv4;
    tcp_t         tcp;
}

struct metadata {
}

error {
    IPv4HeaderTooShort,
    IPv4IncorrectVersion,
    IPv4ChecksumError
}

parser parserI(packet_in pkt,
               out headers hdr,
               inout metadata meta,
               inout standard_metadata_t stdmeta)
{
    state start {
        pkt.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            0x0800: parse_ipv4;
            default: accept;
        }
    }
    state parse_ipv4 {
        ////////////////////////////////////////////////////////////
        // WARNING WARNING WARNING
        ////////////////////////////////////////////////////////////
        // This is NOT the correct way to extract IPv4
        // options according the the standards.  This is a hacked-up
        // example that allows us to make STF tests cases for issue
        // #1025 that can pass/fail based upon bmv2 detecting a
        // HeaderTooShort parser error at exactly the right number of
        // bytes of variable length header, even detecting a bug that
        // was off by 1 byte.
        pkt.extract(hdr.ipv4,
                    (bit<32>)
                    (8 *
                     (bit<9>) (pkt.lookahead<IPv4_up_to_ihl_only_h >().ihl)));
        ////////////////////////////////////////////////////////////
        // WARNING WARNING WARNING
        ////////////////////////////////////////////////////////////
        transition select (hdr.ipv4.protocol) {
            6: parse_tcp;
            default: accept;
        }
    }
    state parse_tcp {
        pkt.extract(hdr.tcp);
        transition accept;
    }
}

control cIngress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t stdmeta)
{
    bit<1> eth_valid;
    bit<1> ipv4_valid;
    bit<1> tcp_valid;
    apply {
        eth_valid = (bit<1>) hdr.ethernet.isValid();
        ipv4_valid = (bit<1>) hdr.ipv4.isValid();
        tcp_valid = (bit<1>) hdr.tcp.isValid();
        hdr.ethernet.dstAddr = (24w0 ++
                                7w0 ++ eth_valid ++
                                7w0 ++ ipv4_valid ++
                                7w0 ++ tcp_valid);
    }
}

control cEgress(inout headers hdr,
                inout metadata meta,
                inout standard_metadata_t stdmeta)
{
    apply { }
}

control verifyChecksum(inout headers hdr,
                       inout metadata meta)
{
    apply { }
}

control updateChecksum(inout headers hdr,
                       inout metadata meta)
{
    apply { }
}

control DeparserI(packet_out packet,
                  in headers hdr)
{
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv4);
        packet.emit(hdr.tcp);
    }
}

V1Switch(parserI(),
         verifyChecksum(),
         cIngress(),
         cEgress(),
         updateChecksum(),
         DeparserI()) main;
\n
\n
# The packets in the 'packet' lines below were created using the
# Python Scapy library.
#
# First define these Python functions:
#
# def str_to_hex(s):
#     return ''.join(map(lambda x: '%02x' % (ord(x)), s))
#
# import re
# def hex_to_str(hex_s):
#     tmp = re.sub('[ \t]', '', hex_s)
#     return str(bytearray.fromhex(tmp))

# The first packet was created with these Python statements:
# pkt1=Ether(dst='52:54:00:12:35:02',src='08:00:27:01:8b:bc') / IP(dst='10.2.3.4', options=IPOption('\x83\x03\x10')) / TCP(sport=5501, dport=80)
# str_to_hex(str(pkt1))
# Then hand-modifying the resulting ihl field value in the hex string
# to get the desired hacked-up value for this test case.

# These packets do not contain standard usage of the ihl field in
# their things that look a lot like IPv4 headers, so cannot be parsed
# by Scapy.

# pkt1 tests that simple_switch does _not_ cause a HeaderTooShort
# error during parsing.  All of the headers ethernet, ipv4, and tcp
# should be valid after parsing, which is reflected in the modified
# dstAddr field in the output packet's Ethernet header.

packet 0 525400123502 080027018bbc 0800 4400002c000100004006cdb30a00020f0a020304 83031000 157d005000000000000000005002200061010000
expect 0 000000010101 080027018bbc 0800 4400002c000100004006cdb30a00020f0a020304 83031000 157d005000000000000000005002200061010000

# The second packet was created with these Python statements:
# pkt2=Ether(dst='52:54:00:12:35:02',src='08:00:27:01:8b:bc') / IP(dst='10.2.3.4', options=IPOption('\x83\x07\x10\x0a\x01\x02\x03')) / TCP(sport=5501, dport=80)
# str_to_hex(str(pkt2))
# Then hand-modifying the resulting ihl field value in the hex string
# to get the desired hacked-up value for this test case.

# This packet _should_ cause simple_switch to detect a HeaderTooShort
# error during the extract() call in the parse_ipv4 state, and thus
# never reach the parse_tcp state.  Both the ipv4 and tcp headers
# should thus be invalid.

packet 0 525400123502 080027018bbc 0800 48000030000100004006c89f0a00020f0a020304 8307100a01020300 157d005000000000000000005002200061010000
expect 0 000000010000 080027018bbc 0800 48000030000100004006c89f0a00020f0a020304 8307100a01020300 157d005000000000000000005002200061010000

# This packet was created by copying and pasting the previous one, and
# deleting the last 3 bytes of the things that look something like
# IPv4 options, and reducing ihl down from 8 to 5.

# Its ihl value should be just 1 too large to avoid a parser
# HeaderTooShort error, thus the output packet's Ethernet dstAddr is
# the same as the previous packet.

packet 0 525400123502 080027018bbc 0800 45000030000100004006c89f0a00020f0a020304 8307100a01 157d005000000000000000005002200061010000
expect 0 000000010000 080027018bbc 0800 45000030000100004006c89f0a00020f0a020304 8307100a01 157d005000000000000000005002200061010000
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 000000010000080027018bbc080045000030000100004006c89f0a00020f0a0203048307100a01157d005000000000000000005002200061010000

Packet matched the expected packet.
Packet:   port 0 pkt 000000010000080027018bbc080048000030000100004006c89f0a00020f0a0203048307100a01020300157d005000000000000000005002200061010000

Packet matched the expected packet.
Packet:   port 0 pkt 000000010101080027018bbc08004400002c000100004006cdb30a00020f0a02030483031000157d005000000000000000005002200061010000
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpz15bzm4d
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpz15bzm4d/issue1025-bmv2.json /petr4/ci-test/testdata/p4_16_samples/issue1025-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9926 --device-id 836 -i 0@pcap0 .././tmpz15bzm4d/issue1025-bmv2.json
Running simple_switch_CLI --thrift-port 9926
STF Command: packet 0 525400123502 080027018bbc 0800 4400002c000100004006cdb30a00020f0a020304 83031000 157d005000000000000000005002200061010000
STF Command: expect 0 000000010101 080027018bbc 0800 4400002c000100004006cdb30a00020f0a020304 83031000 157d005000000000000000005002200061010000
STF Command: packet 0 525400123502 080027018bbc 0800 48000030000100004006c89f0a00020f0a020304 8307100a01020300 157d005000000000000000005002200061010000
STF Command: expect 0 000000010000 080027018bbc 0800 48000030000100004006c89f0a00020f0a020304 8307100a01020300 157d005000000000000000005002200061010000
STF Command: packet 0 525400123502 080027018bbc 0800 45000030000100004006c89f0a00020f0a020304 8307100a01 157d005000000000000000005002200061010000
STF Command: expect 0 000000010000 080027018bbc 0800 45000030000100004006c89f0a00020f0a020304 8307100a01 157d005000000000000000005002200061010000
simple_switch exit code -15
Execution completed
Comparing outputs

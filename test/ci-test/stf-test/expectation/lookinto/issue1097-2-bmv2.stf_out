p4 program:
\n
/*
Copyright 2017 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

header myhdr_t {
    bit<8> reg_idx_to_update;
    bit<8> value_to_add;
    bit<8> debug_last_reg_value_written;
}

struct Headers {
    myhdr_t myhdr;
}

struct Meta {}

parser p(packet_in b,
    out Headers h,
    inout Meta m,
    inout standard_metadata_t sm)
{
    state start {
        b.extract(h.myhdr);
        transition accept;
    }
}

register<bit<8>>(256) r;

control ingress(inout Headers h,
    inout Meta m,
    inout standard_metadata_t sm)
{
    apply {
        bit<8> x;
        r.read(x, (bit<32>) h.myhdr.reg_idx_to_update);
        r.write((bit<32>) h.myhdr.reg_idx_to_update, 0x2a);
    }
}

control egress(inout Headers h,
    inout Meta m,
    inout standard_metadata_t sm)
{
    apply {
        bit<8> tmp;
        r.read(tmp, (bit<32>) h.myhdr.reg_idx_to_update);
        tmp = tmp + h.myhdr.value_to_add;
        r.write((bit<32>) h.myhdr.reg_idx_to_update, tmp);
        h.myhdr.debug_last_reg_value_written = tmp;
    }
}

control deparser(packet_out b,
    in Headers h)
{
    apply {
        b.emit(h.myhdr);
    }
}

control vrfy(inout Headers h, inout Meta m) { apply {} }
control update(inout Headers h, inout Meta m) { apply {} }

V1Switch(p(), vrfy(), ingress(), egress(), update(), deparser()) main;
\n
\n
packet 0 00 17 00
expect 0 00 17 41

packet 0 01 FF 00
expect 0 01 FF 29
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 01ff29

Packet matched the expected packet.
Packet:   port 0 pkt 001741
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp6ak6d8pb
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp6ak6d8pb/issue1097-2-bmv2.json /petr4/ci-test/testdata/p4_16_samples/issue1097-2-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9911 --device-id 821 -i 0@pcap0 .././tmp6ak6d8pb/issue1097-2-bmv2.json
Running simple_switch_CLI --thrift-port 9911
STF Command: packet 0 00 17 00
STF Command: expect 0 00 17 41
STF Command: packet 0 01 FF 00
STF Command: expect 0 01 FF 29
simple_switch exit code -15
Execution completed
Comparing outputs

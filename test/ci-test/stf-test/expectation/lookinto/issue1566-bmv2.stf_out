p4 program:
\n

/*
Copyright 2018 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

typedef bit<48>  EthernetAddress;

header Ethernet_h {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

struct Parsed_packet {
    Ethernet_h    ethernet;
}

struct metadata_t {
    bit<4>  a;
    bit<4>  b;
}

control my_control_type(inout bit<16> x);

control C1(inout bit<16> x)
{
    counter((bit<32>) 65536, CounterType.packets) stats;
    apply {
        x = x + 1;
        stats.count((bit<32>) x);
    }
};

control C2(inout bit<16> x)(my_control_type c)
{
    apply {
        x = x << 1;
        c.apply(x);
    }
}

control C3(inout bit<16> x)(my_control_type c) {
    apply {
        x = x << 3;
        c.apply(x);
    }
}

control E(inout bit<16> x) {
    C1() c1;
    C2(c1) c2;
    C3(c1) c3;
    apply {
        c2.apply(x);
        c3.apply(x);
    }
}

parser parserI(packet_in pkt,
               out Parsed_packet hdr,
               inout metadata_t meta,
               inout standard_metadata_t stdmeta) {
    state start {
        pkt.extract(hdr.ethernet);
        transition accept;
    }
}

control cIngress(inout Parsed_packet hdr,
                 inout metadata_t meta,
                 inout standard_metadata_t stdmeta) {
    apply {
        E.apply(hdr.ethernet.etherType);
    }
}

control cEgress(inout Parsed_packet hdr,
                inout metadata_t meta,
                inout standard_metadata_t stdmeta) {
    apply { }
}

control DeparserI(packet_out packet,
                  in Parsed_packet hdr) {
    apply { packet.emit(hdr.ethernet); }
}

control vc(inout Parsed_packet hdr,
           inout metadata_t meta) {
    apply { }
}

control uc(inout Parsed_packet hdr,
           inout metadata_t meta) {
    apply { }
}

V1Switch(parserI(),
    vc(),
    cIngress(),
    cEgress(),
    uc(),
    DeparserI()) main;
\n
\n
# Here is a created-by-hand walkthrough of what the P4 program
# issue1566-bmv2.p4 _should_ do when it receives a packet with an
# etherType field of 0xcafe:

# cIngress call E.apply(0xcafe)
# E calls c2.apply(0xcafe)
# c2 does x = x << 1    (bit<16>) (0xcafe << 1) = 0x95fc = 38396
# c2 does c.apply(0x95fc)
# c does x = x + 1      x becomes 0x95fd = 38397
# c does stats.count(38397)
# c returns back to c2
# c2 returns back to E
# E calls c3.apply(0x95fd)
# c3 does x = x << 3    (bit<16>) (0x95fd << 3) = 0xafe8 = 45032
# c3 does c.apply(0xafe8)
# c does x= x + 1       x becomes 0xafe9 = 45033
# c does stats.count(45033)
# c returns back to c3
# c3 returns back to E
# E returns back to cIngress
# packet goes to cEgress, then deparser, with etherType modified to 0xafe9

packet 0  0000 0000 0000  0000 0000 0000  cafe
expect 0  0000 0000 0000  0000 0000 0000  afe9
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 000000000000000000000000afe9
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp7uuqih10
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp7uuqih10/issue1566-bmv2.json /petr4/ci-test/testdata/p4_16_samples/issue1566-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9486 --device-id 396 -i 0@pcap0 .././tmp7uuqih10/issue1566-bmv2.json
Running simple_switch_CLI --thrift-port 9486
STF Command: packet 0  0000 0000 0000  0000 0000 0000  cafe
STF Command: expect 0  0000 0000 0000  0000 0000 0000  afe9
simple_switch exit code -15
Execution completed
Comparing outputs

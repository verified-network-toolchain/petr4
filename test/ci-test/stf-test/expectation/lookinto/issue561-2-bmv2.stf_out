p4 program:
\n
#include <core.p4>
#include <v1model.p4>

header S {
    bit<8> t;
}

header O1 {
    bit<8> data;
}
header O2 {
    bit<16> data;
}

header_union U {
    O1 byte;
    O2 short;
}

struct headers {
    S base;
    U u;
}

struct metadata {}

parser ParserImpl(packet_in packet,
                  out headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata)
{
    state start {
        packet.extract(hdr.base);
        transition select(hdr.base.t) {
            0: parseO1;
            1: parseO2;
            default: skip;
        }
    }
    state parseO1 {
        packet.extract(hdr.u.byte);
        transition accept;
    }
    state parseO2 {
        packet.extract(hdr.u.short);
        transition accept;
    }
    state skip {
        transition accept;
    }
}

control ingress(inout headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {
    table debug_hdr {
        key = {
            hdr.base.t: exact;
            hdr.u.short.isValid(): exact;
            hdr.u.byte.isValid(): exact;
        }
        actions = { NoAction; }
        const default_action = NoAction();
    }
    apply {
        debug_hdr.apply();
        // Test setInvalid for header unions
        if (hdr.u.short.isValid()) {
            hdr.u.short.data = 0xFFFF;
            hdr.u.short.setInvalid();
        }
        else if (hdr.u.byte.isValid()) {
            hdr.u.byte.data = 0xFF;
            hdr.u.byte.setInvalid();
        }
    }
}

control egress(inout headers hdr,
               inout metadata meta,
               inout standard_metadata_t standard_metadata)
{ apply {} }

control DeparserImpl(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr);
    }
}

control verifyChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

control computeChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

V1Switch(ParserImpl(),
         verifyChecksum(),
         ingress(),
         egress(),
         computeChecksum(),
         DeparserImpl()) main;
\n
\n
packet 0 00 00 00 00
packet 0 01 00 00 00
packet 0 02 00 00 00

expect 0 00 00 00$
expect 0 01 00$
expect 0 02 00 00 00$
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 02000000

Packet matched the expected packet.
Packet:   port 0 pkt 0100

Packet matched the expected packet.
Packet:   port 0 pkt 000000
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpfc20q5m7
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpfc20q5m7/issue561-2-bmv2.json /petr4/ci-test/testdata/p4_16_samples/issue561-2-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9391 --device-id 301 -i 0@pcap0 .././tmpfc20q5m7/issue561-2-bmv2.json
Running simple_switch_CLI --thrift-port 9391
STF Command: packet 0 00 00 00 00
STF Command: packet 0 01 00 00 00
STF Command: packet 0 02 00 00 00
STF Command: expect 0 00 00 00$
STF Command: expect 0 01 00$
STF Command: expect 0 02 00 00 00$
simple_switch exit code -15
Execution completed
Comparing outputs

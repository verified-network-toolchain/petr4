p4 program:
\n
#include <core.p4>
#include <v1model.p4>

header H {
    bit<16> d;
    bit<16> c;
}

struct Parsed_packet {
    H h;
}

struct Metadata {

}

control DeparserI(packet_out packet, in Parsed_packet hdr) {
    apply {
        packet.emit(hdr.h);
    }
}

parser parserI(packet_in pkt, out Parsed_packet hdr, inout Metadata meta, inout standard_metadata_t stdmeta) {
    state start {
        pkt.extract(hdr.h);
        transition accept;
    }
}

control cIngress(inout Parsed_packet hdr, inout Metadata meta, inout standard_metadata_t stdmeta) {
    apply {
        hdr.h.d = hdr.h.d + 1;
    }
}

control cEgress(inout Parsed_packet hdr, inout Metadata meta, inout standard_metadata_t stdmeta) {
    apply {}
}

control vc(inout Parsed_packet hdr, inout Metadata meta) {
    apply {
        verify_checksum(true, { hdr.h.d }, hdr.h.c, HashAlgorithm.csum16);
    }
}

control uc(inout Parsed_packet hdr, inout Metadata meta) {
    apply {
        update_checksum(true, { hdr.h.d }, hdr.h.c, HashAlgorithm.csum16);
    }
}

V1Switch(parserI(), vc(), cIngress(), cEgress(), uc(), DeparserI()) main;
\n
\n
packet 0 0000 0000
expect 0 0001 FFFE
packet 0 0001 FFFE
expect 0 0002 FFFD
packet 0 FFFF 0000
expect 0 0000 FFFF
packet 0 FFFE 1000
expect 0 FFFF 0000
packet 0 FFFD 1000
expect 0 FFFE 0001
packet 0 FFFE 0001
expect 0 FFFF 0000
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt ffff0000

Packet matched the expected packet.
Packet:   port 0 pkt fffe0001

Packet matched the expected packet.
Packet:   port 0 pkt ffff0000

Packet matched the expected packet.
Packet:   port 0 pkt 0000ffff

Packet matched the expected packet.
Packet:   port 0 pkt 0002fffd

Packet matched the expected packet.
Packet:   port 0 pkt 0001fffe
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp_qeeh5_d
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp_qeeh5_d/issue655-bmv2.json /petr4/ci-test/testdata/p4_16_samples/issue655-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9295 --device-id 205 -i 0@pcap0 .././tmp_qeeh5_d/issue655-bmv2.json
Running simple_switch_CLI --thrift-port 9295
STF Command: packet 0 0000 0000
STF Command: expect 0 0001 FFFE
STF Command: packet 0 0001 FFFE
STF Command: expect 0 0002 FFFD
STF Command: packet 0 FFFF 0000
STF Command: expect 0 0000 FFFF
STF Command: packet 0 FFFE 1000
STF Command: expect 0 FFFF 0000
STF Command: packet 0 FFFD 1000
STF Command: expect 0 FFFE 0001
STF Command: packet 0 FFFE 0001
STF Command: expect 0 FFFF 0000
simple_switch exit code -15
Execution completed
Comparing outputs

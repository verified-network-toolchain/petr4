p4 program:
\n
#include <core.p4>
#include <v1model.p4>

header Header {
    bit<32> data;
}

struct Headers {
    Header h;
}

struct M {}

parser prs(packet_in p, out Headers h, inout M meta, inout standard_metadata_t s) {
    state start {
        p.extract<Header>(_);
        p.extract(h.h);
        transition accept;
    }
}

control vc(inout Headers hdr, inout M meta) { apply {} }
control i(inout Headers hdr,
          inout M meta,
          inout standard_metadata_t standard_metadata) {
    apply {}}
control e(inout Headers hdr,
          inout M meta,
          inout standard_metadata_t standard_metadata) {
    apply {}}
control cc(inout Headers hdr, inout M meta) {
    apply {}}
control d(packet_out b, in Headers hdr) {
    apply {
        b.emit(hdr);
    }
}

V1Switch(prs(), vc(), i(), e(), cc(), d()) main;\n
\n
packet 0 00000000 00000001
expect 0 00000001
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 00000001
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpr91psec3
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpr91psec3/issue774-4-bmv2.json /petr4/ci-test/testdata/p4_16_samples/issue774-4-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9626 --device-id 536 -i 0@pcap0 .././tmpr91psec3/issue774-4-bmv2.json
Running simple_switch_CLI --thrift-port 9626
STF Command: packet 0 00000000 00000001
STF Command: expect 0 00000001
simple_switch exit code -15
Execution completed
Comparing outputs

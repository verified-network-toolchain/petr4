p4 program:
\n
#include <ebpf_model.p4>
#include <core.p4>

#include "ebpf_headers.p4"

struct Headers_t {
    Ethernet_h ethernet;
    IPv4_h     ipv4;
}

parser prs(packet_in p, out Headers_t headers) {
    state start {
        p.extract(headers.ethernet);
        transition select(headers.ethernet.etherType) {
            16w0x800 : ip;
            default : reject;
        }
    }

    state ip {
        p.extract(headers.ipv4);
        transition accept;
    }
}

control pipe(inout Headers_t headers, out bool pass) {
    action invalidate() {
        headers.ipv4.setInvalid();
        headers.ethernet.setInvalid();
        pass = true;
    }
    action drop() {
        pass = false;
    }
    table t {
        key = {
            headers.ipv4.srcAddr : exact;
            headers.ipv4.dstAddr : exact;
            headers.ethernet.dstAddr : exact;
            headers.ethernet.srcAddr: exact;
        }
        actions = {
            invalidate; drop;
        }
        implementation = hash_table(10);
        default_action = drop;
    }

    apply {
        t.apply();
    }
}

ebpfFilter(prs(), pipe()) main;
\n
\n
# bit<32> A bit<32> B
# In the output B = (A + 10)
add pipe_t 0 key.field0:0x0a019845 key.field1:0x3212c86a key.field2:0x001b17000130 key.field3:0xb88198b7aeb7 pipe_invalidate()

packet 0 00000000 00000000 00000000 00000000 00000000 ABCDEF01

packet 0 001b1700 0130b881 98b7aeb7 08004500 00344a6f 40004006 53920a01 98453212 c86acf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f
expect 0 001b1700 0130b881 98b7aeb7 08004500 00344a6f 40004006 53920a01 98453212 c86acf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f

packet 0 00000000 00000000 00000000 00000000 00000000 00010000

packet 0 00000000 00000000 00000000 00000000 00000000 00011000

packet 0 001b1700 0130b881 98b7aeb7 08004500 00344a6f 40004006 53920a01 98453212 d86acf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Uncaught exception:
  
  (Invalid_argument "length mismatch in zip_exn: 1 <> 0")

Raised at Stdlib.invalid_arg in file "stdlib.ml", line 30, characters 20-45
Called from Base__List.zip_exn in file "src/list.ml", line 504, characters 2-35
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 107, characters 18-47
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Writing temporary files into  ./tmp8tfcd7m8
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp8tfcd7m8/key_ebpf.json /petr4/ci-test/testdata/p4_16_samples/key_ebpf.p4
Exit code  1
Error compiling
/usr/local/share/p4c/p4include/ebpf_model.p4(69): [--Wwarn=invalid] warning: ebpfFilter: the main package should be called V1Switch; are you using the wrong architecture?
package ebpfFilter<H>(parse<H> prs,
        ^^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/key_ebpf.p4(54): [--Werror=Target model error] error: package ebpfFilter: main package  match the expected model
Are you using an up-to-date v1model.p4?
ebpfFilter(prs(), pipe()) main;
                          ^^^^

*** Test failed

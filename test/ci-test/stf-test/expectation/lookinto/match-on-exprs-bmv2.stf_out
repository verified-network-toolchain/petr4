p4 program:
\n
/*
Copyright 2019 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

typedef bit<48>  EthernetAddress;

header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

struct headers_t {
    ethernet_t    ethernet;
}

struct metadata_t {
}

parser parserImpl(packet_in packet,
                  out headers_t hdr,
                  inout metadata_t meta,
                  inout standard_metadata_t stdmeta)
{
    state start {
        packet.extract(hdr.ethernet);
        transition accept;
    }
}

control verifyChecksum(inout headers_t hdr, inout metadata_t meta) {
    apply { }
}

control ingressImpl(inout headers_t hdr,
                    inout metadata_t meta,
                    inout standard_metadata_t stdmeta)
{
    action my_drop() {
        mark_to_drop(stdmeta);
    }
    action foo(bit<9> out_port) {
        hdr.ethernet.dstAddr[22:18] = hdr.ethernet.srcAddr[5:1];
        stdmeta.egress_spec = out_port;
    }
    table t1 {
        key = {
            hdr.ethernet.srcAddr[22:18] : exact @name("ethernet.srcAddr.slice");
            hdr.ethernet.dstAddr & 0x010101010101 : exact @name("dstAddr_lsbs");
            hdr.ethernet.etherType - 10 : exact @name("etherType_less_10");
        }
        actions = {
            foo;
            my_drop;
            NoAction;
        }
        const default_action = NoAction;
    }
    apply {
        t1.apply();
    }
}

control egressImpl(inout headers_t hdr,
                   inout metadata_t meta,
                   inout standard_metadata_t stdmeta)
{
    apply { }
}

control updateChecksum(inout headers_t hdr, inout metadata_t meta) {
    apply { }
}

control deparserImpl(packet_out packet,
                     in headers_t hdr)
{
    apply {
        packet.emit(hdr.ethernet);
    }
}

V1Switch(parserImpl(),
         verifyChecksum(),
         ingressImpl(),
         egressImpl(),
         updateChecksum(),
         deparserImpl()) main;
\n
\n
# Note that table search key field names must be the ones given in
# @name annotations, if those are used.
add t1 ethernet.srcAddr.slice:0x1f dstAddr_lsbs:0x010101010101 etherType_less_10:0xf00f ingressImpl.foo(out_port:3)

expect 3 ff01ff7dff01 0000007c003e f019
packet 1 ff01ff01ff01 0000007c003e f019
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 3 pkt ff01ff7dff010000007c003ef019
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap1 as port 1 (files)
Adding interface pcap3 as port 3 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: Adding entry to exact match table ingressImpl.t1
match key:           EXACT-1f	EXACT-01:01:01:01:01:01	EXACT-f0:0f
action:              ingressImpl.foo
runtime data:        00:03
Entry has been added with handle 0
RuntimeCmd: 
Writing temporary files into  ./tmpnn4hw3xa
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpnn4hw3xa/match-on-exprs-bmv2.json /petr4/ci-test/testdata/p4_16_samples/match-on-exprs-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 10040 --device-id 950 -i 1@pcap1 -i 3@pcap3 .././tmpnn4hw3xa/match-on-exprs-bmv2.json
Running simple_switch_CLI --thrift-port 10040
STF Command: add t1 ethernet.srcAddr.slice:0x1f dstAddr_lsbs:0x010101010101 etherType_less_10:0xf00f ingressImpl.foo(out_port:3)
table_add ingressImpl.t1 ingressImpl.foo 0x1f 0x010101010101 0xf00f => 3
STF Command: expect 3 ff01ff7dff01 0000007c003e f019
STF Command: packet 1 ff01ff01ff01 0000007c003e f019
simple_switch exit code -15
Execution completed
Comparing outputs

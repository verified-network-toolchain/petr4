p4 program:
\n
/*
Copyright 2019 Orange

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#define UBPF_MODEL_VERSION 20200515
#include <ubpf_model.p4>

@ethernetaddress typedef bit<48> EthernetAddress;

// standard Ethernet header
header Ethernet_h
{
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16> etherType;
}

struct Headers_t
{
    Ethernet_h ethernet;
}

struct metadata {
    bit<16> etherType;
}

parser prs(packet_in p, out Headers_t headers, inout metadata meta, inout standard_metadata std_meta) {
    state start {
        p.extract(headers.ethernet);
        transition accept;
    }
}

control pipe(inout Headers_t headers, inout metadata meta, inout standard_metadata std_meta) {

    action fill_metadata() {
        meta.etherType = headers.ethernet.etherType;
    }

    table tbl {
        key = {
            headers.ethernet.etherType : exact;
        }
        actions = {
            fill_metadata;
            NoAction;
        }
    }

    action change_etherType() {
        // set etherType to IPv6. Just to show that metadata works.
        headers.ethernet.etherType = 0x86DD;
    }

    table meta_based_tbl {
        key = {
            meta.etherType : exact;
        }
        actions = {
            change_etherType;
            NoAction;
        }
    }

    apply {
        tbl.apply();
        meta_based_tbl.apply();
    }

}

control DeparserImpl(packet_out packet, in Headers_t headers) {
    apply {
        packet.emit(headers.ethernet);
    }
}

ubpf(prs(), pipe(), DeparserImpl()) main;

\n
\n
add pipe_tbl 0 key.headers_ethernet_etherType:0x0800 pipe_fill_metadata()
add pipe_meta_based_tbl 0 key.meta_etherType:0x0800 pipe_change_etherType()

packet 0 00000000 00000000 00000000 08000000 00000000 ABCDEF01
expect 0 00000000 00000000 00000000 86DD0000 00000000 ABCDEF01

packet 0 001b1700 0130b881 98b7aeb7 08004500 00344a6f 40004006 53920a01 98453212 c86acf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f
expect 0 001b1700 0130b881 98b7aeb7 86DD4500 00344a6f 40004006 53920a01 98453212 c86acf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f

packet 0 00000000 00000000 00000000 00000000 00000000 00010000
expect 0 00000000 00000000 00000000 00000000 00000000 00010000\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Uncaught exception:
  
  (Failure "architecture unsupported")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 106, characters 31-65
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Writing temporary files into  ./tmprjd8o608
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmprjd8o608/metadata_ubpf.json /petr4/ci-test/testdata/p4_16_samples/metadata_ubpf.p4
Exit code  1
Error compiling
/usr/local/share/p4c/p4include/ubpf_model.p4(176): [--Wwarn=invalid] warning: ubpf: the main package should be called V1Switch; are you using the wrong architecture?
package ubpf<H, M>(parse<H, M> prs,
        ^^^^
/petr4/ci-test/testdata/p4_16_samples/metadata_ubpf.p4(91): [--Werror=Target model error] error: package ubpf: main package  match the expected model
Are you using an up-to-date v1model.p4?
ubpf(prs(), pipe(), DeparserImpl()) main;
                                    ^^^^

*** Test failed

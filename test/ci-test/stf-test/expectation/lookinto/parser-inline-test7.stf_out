p4 program:
\n
// Test of subparser inlining with following characteristics:
// - one subparser instance
// - two invocations of the same instance with different arguments
// - no statement after both invocations
// - transition to the same state after both invocations

#include <v1model.p4>

struct metadata { }

header data_t {
    bit<8> f;
}

struct headers {
    data_t h1;
    data_t h2;
}

parser Subparser(      packet_in packet,
                 inout data_t    hdr) {
    state start {
        hdr.f = 42;
        transition accept;
    }
}

parser ParserImpl(      packet_in           packet,
                  out   headers             hdr,
                  inout metadata            meta,
                  inout standard_metadata_t standard_metadata) {
    Subparser() p;

    state start {
        packet.extract(hdr.h1);
        packet.extract(hdr.h2);
        transition select(standard_metadata.ingress_port) {
            0: p0;
            default: p1;
        }
    }

    state p0 { p.apply(packet, hdr.h1); transition accept; }
    state p1 { p.apply(packet, hdr.h2); transition accept; }
}

control ingress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
    apply {
        if (hdr.h1.f == 42) {
            standard_metadata.egress_spec = 1;
        } else {
            standard_metadata.egress_spec = 10;
        }
    }
}

control egress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
    apply {
    }
}

control DeparserImpl(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr);
    }
}

control verifyChecksum(inout headers hdr, inout metadata meta) {
    apply {
    }
}

control computeChecksum(inout headers hdr, inout metadata meta) {
    apply {
    }
}

V1Switch(ParserImpl(), verifyChecksum(), ingress(), egress(), computeChecksum(), DeparserImpl()) main;\n
\n
packet  0 01 23 45 67 89
expect  1 2a 23 45 67 89

packet  1 01 23 45 67 89
expect 10 01 2a 45 67 89

packet  1 2a 23 45 67 89
expect  1 2a 2a 45 67 89\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 1 pkt 2a2a456789

Packet matched the expected packet.
Packet:   port 10 pkt 012a456789

Packet matched the expected packet.
Packet:   port 1 pkt 2a23456789
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Adding interface pcap1 as port 1 (files)
Adding interface pcap10 as port 10 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpmdhxc6ff
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpmdhxc6ff/parser-inline-test7.json /petr4/ci-test/testdata/p4_16_samples/parser-inline/parser-inline-test7.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9713 --device-id 623 -i 0@pcap0 -i 1@pcap1 -i 10@pcap10 .././tmpmdhxc6ff/parser-inline-test7.json
Running simple_switch_CLI --thrift-port 9713
STF Command: packet  0 01 23 45 67 89
STF Command: expect  1 2a 23 45 67 89
STF Command: packet  1 01 23 45 67 89
STF Command: expect 10 01 2a 45 67 89
STF Command: packet  1 2a 23 45 67 89
STF Command: expect  1 2a 2a 45 67 89
simple_switch exit code -15
Execution completed
Comparing outputs

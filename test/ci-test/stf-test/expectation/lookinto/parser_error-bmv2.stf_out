p4 program:
\n
#include <core.p4>
#include <v1model.p4>

header Ethernet {
    bit<48> src;
    bit<48> dst;
    bit<16> type;
}

struct parsed_packet_t {
    Ethernet eth;
};

struct local_metadata_t {};

parser parse(packet_in pk, out parsed_packet_t hdr,
             inout local_metadata_t local_metadata,
             inout standard_metadata_t standard_metadata) {
    state start {
        pk.extract(hdr.eth);
        transition accept;
    }
}

control ingress(inout parsed_packet_t hdr,
                inout local_metadata_t local_metadata,
	        inout standard_metadata_t standard_metadata) {
    apply {
        if (standard_metadata.parser_error == error.PacketTooShort) {
            hdr.eth.setValid();
            hdr.eth.type = 0;
            hdr.eth.src = 0;
            hdr.eth.dst = 0;
        }
        standard_metadata.egress_spec = 0;
    }
}

control egress(inout parsed_packet_t hdr,
               inout local_metadata_t local_metadata,
	       inout standard_metadata_t standard_metadata) {
    apply { }
}

control deparser(packet_out b, in parsed_packet_t hdr) {
    apply {
        b.emit(hdr);
    }
}

control verify_checks(inout parsed_packet_t hdr,
                      inout local_metadata_t local_metadata) {
    apply { }
}

control compute_checksum(inout parsed_packet_t hdr,
                         inout local_metadata_t local_metadata) {
    apply { }
}

V1Switch(parse(), verify_checks(), ingress(), egress(),
         compute_checksum(), deparser()) main;
\n
\n
packet 0 012345678910 111213141516 0A0B
expect 0 012345678910 111213141516 0A0B

packet 0 012345678910
expect 0 000000000000 000000000000 0000 012345678910$
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 0000000000000000000000000000012345678910

Packet matched the expected packet.
Packet:   port 0 pkt 0123456789101112131415160a0b
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpdcxh2rn9
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpdcxh2rn9/parser_error-bmv2.json /petr4/ci-test/testdata/p4_16_samples/parser_error-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9452 --device-id 362 -i 0@pcap0 .././tmpdcxh2rn9/parser_error-bmv2.json
Running simple_switch_CLI --thrift-port 9452
STF Command: packet 0 012345678910 111213141516 0A0B
STF Command: expect 0 012345678910 111213141516 0A0B
STF Command: packet 0 012345678910
STF Command: expect 0 000000000000 000000000000 0000 012345678910$
simple_switch exit code -15
Execution completed
Comparing outputs

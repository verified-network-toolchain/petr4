p4 program:
\n
#include <core.p4>
#include <v1model.p4>

header ethernet_t {
    bit<48> dst_addr;
    bit<48> src_addr;
    bit<16> eth_type;
}

header H {
    bit<8> a;
}

header IDX {
    bit<8> idx;
}

struct Headers {
    ethernet_t eth_hdr;
    IDX idx;
    H[2] h;
}

bit<8> bound(in bit<8> val, in bit<8> bound) {
    return (val < bound ? val : bound);
}

struct Meta {}

parser p(packet_in pkt, out Headers hdr, inout Meta m, inout standard_metadata_t sm) {
    state start {
        transition parse_hdrs;
    }
    state parse_hdrs {
        pkt.extract(hdr.eth_hdr);
        pkt.extract(hdr.idx);
        pkt.extract(hdr.h.next);
        pkt.extract(hdr.h.next);
        transition accept;
    }
}

control ingress(inout Headers h, inout Meta m, inout standard_metadata_t sm) {
    action simple_action(bool check) {
        if (check) {
            bit<8> val = bound(h.idx.idx, 8w1);
            h.h[val].a = 8w1;
        }
    }
    apply {
        simple_action(true);
    }
}
control vrfy(inout Headers h, inout Meta m) { apply {} }

control update(inout Headers h, inout Meta m) { apply {} }

control egress(inout Headers h, inout Meta m, inout standard_metadata_t sm) { apply {} }

control deparser(packet_out b, in Headers h) { apply {b.emit(h);} }

V1Switch(p(), vrfy(), ingress(), egress(), update(), deparser()) main;

\n
\n
packet 0 6D 67 CB 38 81 D6 C3 26 FE BB C1 D6 BB 13 29 88 6D
expect 0 6D 67 CB 38 81 D6 C3 26 FE BB C1 D6 BB 13 29 88 01
packet 0 52 07 46 92 B7 60 B1 B5 9F 87 72 F6 B4 16 00 76 CB
expect 0 52 07 46 92 B7 60 B1 B5 9F 87 72 F6 B4 16 00 01 CB
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt 52074692b760b1b59f8772f6b4160001cb

Packet matched the expected packet.
Packet:   port 0 pkt 6d67cb3881d6c326febbc1d6bb13298801
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpj1jrp958
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpj1jrp958/predication_issue_2.json /petr4/ci-test/testdata/p4_16_samples/predication_issue_2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9845 --device-id 755 -i 0@pcap0 .././tmpj1jrp958/predication_issue_2.json
Running simple_switch_CLI --thrift-port 9845
STF Command: packet 0 6D 67 CB 38 81 D6 C3 26 FE BB C1 D6 BB 13 29 88 6D
STF Command: expect 0 6D 67 CB 38 81 D6 C3 26 FE BB C1 D6 BB 13 29 88 01
STF Command: packet 0 52 07 46 92 B7 60 B1 B5 9F 87 72 F6 B4 16 00 76 CB
STF Command: expect 0 52 07 46 92 B7 60 B1 B5 9F 87 72 F6 B4 16 00 01 CB
simple_switch exit code -15
Execution completed
Comparing outputs

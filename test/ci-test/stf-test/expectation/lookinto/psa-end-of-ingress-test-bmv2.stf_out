p4 program:
\n
/*
Copyright 2020 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include "bmv2/psa.p4"


typedef bit<48>  EthernetAddress;

header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

header output_data_t {
    bit<32> word0;
    bit<32> word1;
    bit<32> word2;
    bit<32> word3;
}

struct empty_metadata_t {
}

struct metadata_t {
}

struct headers_t {
    ethernet_t       ethernet;
    output_data_t    output_data;
}

control packet_path_to_int (in PSA_PacketPath_t packet_path,
                            out bit<32> ret)
{
    apply {
        // Unconditionally assign a value of 8 to ret, because if all
        // assignments to ret are conditional, p4c gives warnings
        // about ret possibly being uninitialized.
        ret = 8;
        if (packet_path == PSA_PacketPath_t.NORMAL) {
            ret = 1;
        } else if (packet_path == PSA_PacketPath_t.NORMAL_UNICAST) {
            ret = 2;
        } else if (packet_path == PSA_PacketPath_t.NORMAL_MULTICAST) {
            ret = 3;
        } else if (packet_path == PSA_PacketPath_t.CLONE_I2E) {
            ret = 4;
        } else if (packet_path == PSA_PacketPath_t.CLONE_E2E) {
            ret = 5;
        } else if (packet_path == PSA_PacketPath_t.RESUBMIT) {
            ret = 6;
        } else if (packet_path == PSA_PacketPath_t.RECIRCULATE) {
            ret = 7;
        }
        // ret should still be 8 if packet_path is not any of those
        // enum values, which according to the P4_16 specification,
        // could happen if packet_path were uninitialized.
    }
}

parser IngressParserImpl(packet_in pkt,
                         out headers_t hdr,
                         inout metadata_t user_meta,
                         in psa_ingress_parser_input_metadata_t istd,
                         in empty_metadata_t resubmit_meta,
                         in empty_metadata_t recirculate_meta)
{
    state start {
        pkt.extract(hdr.ethernet);
        pkt.extract(hdr.output_data);
        transition accept;
    }
}

control cIngress(inout headers_t hdr,
                 inout metadata_t user_meta,
                 in    psa_ingress_input_metadata_t  istd,
                 inout psa_ingress_output_metadata_t ostd)
{
    apply {
        ostd.drop = (bool) hdr.ethernet.dstAddr[40:40];
        if (istd.packet_path == PSA_PacketPath_t.RESUBMIT) {
            // If packet was resubmitted, do not resubmit it again
        } else {
            ostd.resubmit = (bool) hdr.ethernet.dstAddr[32:32];
        }
        ostd.multicast_group = (MulticastGroup_t)
            ((MulticastGroupUint_t) hdr.ethernet.dstAddr[31:16]);
        ostd.egress_port = (PortId_t) ((PortIdUint_t) hdr.ethernet.dstAddr[15:0]);
        // Recording this value helps to determine in the output
        // packets whether the packet was resubmitted, or not.
        packet_path_to_int.apply(istd.packet_path, hdr.output_data.word0);
    }
}

parser EgressParserImpl(packet_in pkt,
                        out headers_t hdr,
                        inout metadata_t user_meta,
                        in psa_egress_parser_input_metadata_t istd,
                        in empty_metadata_t normal_meta,
                        in empty_metadata_t clone_i2e_meta,
                        in empty_metadata_t clone_e2e_meta)
{
    state start {
        pkt.extract(hdr.ethernet);
        pkt.extract(hdr.output_data);
        transition accept;
    }
}

control cEgress(inout headers_t hdr,
                inout metadata_t user_meta,
                in    psa_egress_input_metadata_t  istd,
                inout psa_egress_output_metadata_t ostd)
{
    Register<bit<16>, bit<8>>(256) egress_pkt_seen;

    apply {
        bit<8> idx = hdr.ethernet.etherType[7:0];
        bit<16> cur_count = egress_pkt_seen.read(idx);
        if (hdr.ethernet.etherType[15:8] == 0xc0) {
            // 'command packet' to read register
            hdr.output_data.word0 = (bit<32>) cur_count;
        } else if (hdr.ethernet.etherType[15:8] == 0xc1) {
            // 'command packet' to write register
            bit<16> write_data = hdr.ethernet.srcAddr[15:0];
            egress_pkt_seen.write(idx, write_data);
        } else {
            // 'data packet' that should be recorded that it went
            // through this code path.  By remembering a packet got
            // here, and using 'command packets' to read/write the
            // 'got here' values before and after sending 'data
            // packets', we can determine from the output packet
            // contents alone whether a packet was dropped during
            // ingress and never did egress processing, or did do
            // egress processing.

            // I tried using a counter instead, but I could not see a
            // way given the existing STF test file infrastructure to
            // deterministically wait until all data packets were
            // processed before sending in the command packet that
            // reads this value, so I would get packet count values
            // ranging between 8 and 12, instead of the deterministic
            // 12 I was hoping for.  Changing it to a flag indicating
            // that at least one packet was seen gives much more
            // repeatable results.
            if (hdr.ethernet.etherType < 256) {
                egress_pkt_seen.write(idx, 1);
            }
            hdr.output_data.word1 = (bit<32>) istd.egress_port;
            hdr.output_data.word2 = (bit<32>) ((EgressInstanceUint_t) istd.instance);
            packet_path_to_int.apply(istd.packet_path, hdr.output_data.word3);
        }
    }
}

control CommonDeparserImpl(packet_out packet,
                           inout headers_t hdr)
{
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.output_data);
    }
}

control IngressDeparserImpl(packet_out buffer,
                            out empty_metadata_t clone_i2e_meta,
                            out empty_metadata_t resubmit_meta,
                            out empty_metadata_t normal_meta,
                            inout headers_t hdr,
                            in metadata_t meta,
                            in psa_ingress_output_metadata_t istd)
{
    CommonDeparserImpl() cp;
    apply {
        cp.apply(buffer, hdr);
    }
}

control EgressDeparserImpl(packet_out buffer,
                           out empty_metadata_t clone_e2e_meta,
                           out empty_metadata_t recirculate_meta,
                           inout headers_t hdr,
                           in metadata_t meta,
                           in psa_egress_output_metadata_t istd,
                           in psa_egress_deparser_input_metadata_t edstd)
{
    CommonDeparserImpl() cp;
    apply {
        cp.apply(buffer, hdr);
    }
}

IngressPipeline(IngressParserImpl(),
                cIngress(),
                IngressDeparserImpl()) ip;

EgressPipeline(EgressParserImpl(),
               cEgress(),
               EgressDeparserImpl()) ep;

PSA_Switch(ip, PacketReplicationEngine(), ep, BufferingQueueingEngine()) main;
\n
\n
mc_mgrp_create 7
mc_node_create 257 8 9
mc_node_associate 7 0

# This STF test and corresponding PSA architecture test program are
# intended to try out all possible end-of-ingress packet behaviores of
# the PSA architecture, and verify that an implementation correctly
# prioritizes the flags like drop, resubmit, and multicast_group being
# 0 or non-0, relative to each other, as specified in the PSA
# specification.

# The P4 program is written to copy parts of the ethernet.dstAddr
# field into PSA ingress standard metadata fields drop, resubmit,
# multicast_group, egress_port.

# Here is a visual breakdown of the sub-fields of dstAddr
#packet 2 00 00 0000 0000 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
#         ^^ least significant bit is cast to bool and assigned to drop
#            ^^ least significant bit is cast to bool and assigned to resubmit
#               ^^^^ assigned to multicast_group
#                    ^^^^ assigned to egress_port

# I believe the list below should be all interesting combinations of
# these 4 values of:

# drop true/false
# resubmit true/false,
# multicast_group 0/non-0 (7 is used for non-0 value in these tests).
# egress_port 0/non-0

# egress_port 0 or non-0 should not affect the behavior, except
# whether the packet unicasts to port 0 or non-0, but I will include
# test cases that exercise that, anyway (using 5 as the non-0 value in
# these tests).

# Later when ingress-to-egress cloning is supported in the PSA
# implementation, it would be good to double the number of test cases
# to cover all of these cross-producted with clone true/false.

# drop=false (0) cases:
# 00 00 0000 0000
# 00 00 0000 0005
# 00 00 0007 0000
# 00 00 0007 0005
# 00 01 0000 0000
# 00 01 0000 0005
# 00 01 0007 0000
# 00 01 0007 0005

# drop=true (1) cases:
# 01 00 0000 0000
# 01 00 0000 0005
# 01 00 0007 0000
# 01 00 0007 0005
# 01 01 0000 0000
# 01 01 0000 0005
# 01 01 0007 0000
# 01 01 0007 0005

######################################################################
# drop=false (0) cases:
######################################################################

# Note that as of 2020-Aug-31, p4c STF tests push packets into the
# BMv2 switch without any attempt to wait for the previously sent
# packet to first finish processing.

# Also, BMv2's ingress and egress processing are separate threads that
# can interleave in time in fairly arbitrary ways.

# Thus for two packets P1 and P2, both sent into port 2, the P1
# unicast out port 5, and P2 unicast out port 6, the order of
# procesing in BMv2 could be any of these:

# P1 ingress
# P2 ingress
# P1 egress
# P2 egress

# P1 ingress
# P2 ingress
# P2 egress
# P1 egress

# P1 ingress
# P1 egress
# P2 ingress
# P2 egress

# About the only thing one can guarantee from the STF test is that "P1
# ingress" will occur before "P2 ingress", and the only reason you can
# do so is that P1 and P2 are sent into the same port 2.  If they were
# sent into different ports, even that would not be guaranteed.

# Thus it seems that if we want to write STF tests that use P4
# registers to verify that packets reach certain parts of the
# processing, we either need:

# (a) A way to make STF tests stop and wait until all previously
# packets sent in have finished processing, before sending in the next
# packet.

# or

# (b) all packets that write and read registers, where the read
# register results are included in the output packets and checked by
# expected packets in the STF test, should follow the same 'path' of
# input port, ingress processing, the same number of resubmit and/or
# recirculate operations in the same order, and multicast to the same
# multicast_group, or unicast to the same output port, before leaving
# on an output port, as the 'data packets' that cause the P4 register
# to be updated.

# For now, I will comment out all packets intended to initialize and
# read P4 registers in this test.  This still leaves a very important
# part of the test, which is verifying that the majority of the
# packets come out the correct output ports, and modified as they
# should be by the P4 program.


### # First initialize the egress packet seen register to 0, read it to
### # confirm it is 0, so that at the end of all of these drop=false cases
### # we can read it again and confirm that when packets reach egress,
### # that register is updating as it should.
###
### # write index 0 with value 0
### packet 2 000000000000 00000000 0000 c1 00   deadbeef deadbeef deadbeef deadbeef
### expect 0 000000000000 00000000 0000 c1 00   00000001 deadbeef deadbeef deadbeef
###
### # read index 0 and confirm it has value 0
### packet 2 000000000000 00000000 0000 c0 00   deadbeef deadbeef deadbeef deadbeef
### expect 0 000000000000 00000000 0000 c0 00   00000000 deadbeef deadbeef deadbeef


packet 2 00 00 0000 0000 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
#        ^^ least significant bit is cast to bool and assigned to drop
#           ^^ least significant bit is cast to bool and assigned to resubmit
#              ^^^^ assigned to multicast_group
#                   ^^^^ assigned to egress_port
# packet should unicast to port 0
expect 0 00 00 0000 0000 000000000000 0000   00000001 00000000 00000000 00000002

packet 2 00 00 0000 0005 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
# packet should unicast to port 5
expect 5 00 00 0000 0005 000000000000 0000   00000001 00000005 00000000 00000002

packet 2 00 00 0007 0000 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
# packet should multicast to group 7
expect 8 00 00 0007 0000 000000000000 0000   00000001 00000008 00000101 00000003
expect 9 00 00 0007 0000 000000000000 0000   00000001 00000009 00000101 00000003

packet 2 00 00 0007 0005 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
# packet should multicast to group 7
expect 8 00 00 0007 0005 000000000000 0000   00000001 00000008 00000101 00000003
expect 9 00 00 0007 0005 000000000000 0000   00000001 00000009 00000101 00000003

packet 2 00 01 0000 0000 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
# packet should resubmit once, then unicast to port 0
expect 0 00 01 0000 0000 000000000000 0000   00000006 00000000 00000000 00000002

packet 2 00 01 0000 0005 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
# packet should resubmit once, then unicast to port 5
expect 5 00 01 0000 0005 000000000000 0000   00000006 00000005 00000000 00000002

packet 2 00 01 0007 0000 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
# packet should resubmit once, then multicast to group 7
expect 8 00 01 0007 0000 000000000000 0000   00000006 00000008 00000101 00000003
expect 9 00 01 0007 0000 000000000000 0000   00000006 00000009 00000101 00000003

packet 2 00 01 0007 0005 000000000000 0000   deadbeef deadbeef deadbeef deadbeef
# packet should resubmit once, then multicast to group 7
expect 8 00 01 0007 0005 000000000000 0000   00000006 00000008 00000101 00000003
expect 9 00 01 0007 0005 000000000000 0000   00000006 00000009 00000101 00000003

# read index 0 and confirm it has value equal to number of data
# packets that went through egress processing since we initialized it
# to 0, counting each multicast copy separately, since each copy
# executes egress code independently of each other.

# As a testing wrinkle, since these packets might be sent very close
# in time to eah other, and bmv2 can process multiple packets
# concurrently, a packet that is not resubmitted might 'pass up' a
# packet that is resubmitted.  That is, this sequence of events is
# possible:

# send in packet A that will be resubmitted and one unicast copy comes out
# send in packet B that will not be resubmitted and one unicast copy comes out
# unicast copy of B comes out
# unicast copy of A comes out

### packet 2 000100000000 00000000 0000 c0 00   deadbeef deadbeef deadbeef deadbeef
### expect 0 000100000000 00000000 0000 c0 00   00000001 deadbeef deadbeef deadbeef

######################################################################
# drop=true (1) cases:
######################################################################

### # This set of tests use the register index 1, instead of 0 as used
### # above, to keep them more independent of each other (the test P4
### # program uses the least significant 8 bits of the etherType as the
### # index to access within the register array).  It also sends command
### # packets to output port 1 instead of output port 0, again in an
### # effort to keep the output packet stream more predictable in its
### # order.
###
### # First initialize the egress packet seen register to 0, read it to
### # confirm it is 0, so that at the end of all of these drop=false cases
### # we can read it again and confirm that when packets reach egress,
### # that register is updating as it should.
###
### # write index 1 with value 0
### packet 2 000000000001 00000000 0000 c1 01   deadbeef deadbeef deadbeef deadbeef
### expect 1 000000000001 00000000 0000 c1 01   00000001 deadbeef deadbeef deadbeef

### # read index 1 and confirm it has value 0
### packet 2 000000000001 00000000 0001 c0 01   deadbeef deadbeef deadbeef deadbeef
### expect 1 000000000001 00000000 0001 c0 01   00000000 deadbeef deadbeef deadbeef

packet 2 01 00 0000 0000 000000000000 0001   deadbeef deadbeef deadbeef deadbeef
packet 2 01 00 0000 0005 000000000000 0001   deadbeef deadbeef deadbeef deadbeef
packet 2 01 00 0007 0000 000000000000 0001   deadbeef deadbeef deadbeef deadbeef
packet 2 01 00 0007 0005 000000000000 0001   deadbeef deadbeef deadbeef deadbeef
packet 2 01 01 0000 0000 000000000000 0001   deadbeef deadbeef deadbeef deadbeef
packet 2 01 01 0000 0005 000000000000 0001   deadbeef deadbeef deadbeef deadbeef
packet 2 01 01 0007 0000 000000000000 0001   deadbeef deadbeef deadbeef deadbeef
packet 2 01 01 0007 0005 000000000000 0001   deadbeef deadbeef deadbeef deadbeef


### # read index 1 and confirm it still has value 0, since none of the
### # recent data packets should have ever reached egress processing.
###
### packet 2 000100000001 00000000 0001 c0 01   deadbeef deadbeef deadbeef deadbeef
### expect 1 000100000001 00000000 0001 c0 01   00000000 deadbeef deadbeef deadbeef
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Uncaught exception:
  
  P4stf.Test_parser.MenhirBasics.Error

Raised at P4stf__Test_parser._menhir_errorcase in file "p4stf/test_parser.ml", line 1803, characters 9-19
Called from P4stf__Test.run_stf in file "p4stf/test.ml", line 150, characters 16-62
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 106, characters 31-65
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Writing temporary files into  ./tmpwoblsmcg
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpwoblsmcg/psa-end-of-ingress-test-bmv2.json /petr4/ci-test/testdata/p4_16_samples/psa-end-of-ingress-test-bmv2.p4
Exit code  1
Error compiling
/usr/local/share/p4c/p4include/bmv2/psa.p4(804): [--Wwarn=invalid] warning: PSA_Switch: the main package should be called V1Switch; are you using the wrong architecture?
package PSA_Switch<IH, IM, EH, EM, NM, CI2EM, CE2EM, RESUBM, RECIRCM> (
        ^^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/psa-end-of-ingress-test-bmv2.p4(217): [--Werror=Target model error] error: package PSA_Switch: main package  match the expected model
Are you using an up-to-date v1model.p4?
PSA_Switch(ip, PacketReplicationEngine(), ep, BufferingQueueingEngine()) main;
                                                                         ^^^^

*** Test failed

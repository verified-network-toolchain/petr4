p4 program:
\n
#include <core.p4>
#include <psa.p4>

typedef bit<48>  EthernetAddress;

header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

header ipv4_base_t {
    bit<4>  version;
    bit<4>  ihl;
    bit<8>  diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3>  flags;
    bit<13> fragOffset;
    bit<8>  ttl;
    bit<8>  protocol;
    bit<16> hdrChecksum;
    bit<32> srcAddr;
    bit<32> dstAddr;
}

header ipv4_option_timestamp_t {
    bit<8>      value;
    bit<8>      len;
    varbit<304> data;
}

struct headers_t {
    ethernet_t ethernet;
    ipv4_base_t             ipv4_base;
    ipv4_option_timestamp_t ipv4_option_timestamp;
}

struct EMPTY { };

parser MyIP(
    packet_in packet,
    out headers_t hdr,
    inout EMPTY b,
    in psa_ingress_parser_input_metadata_t c,
    in EMPTY d,
    in EMPTY e) {

    state start {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            16w0x800: parse_ipv4;
            default: accept;
        }
    }
    state parse_ipv4 {
        packet.extract(hdr.ipv4_base);
        transition select(hdr.ipv4_base.ihl) {
            4w0x5: accept;
            default: parse_ipv4_options;
        }
    }
    state parse_ipv4_option_timestamp {
        bit<16> tmp16 = packet.lookahead<bit<16>>();
        bit<8> tmp_len = tmp16[7:0];
        packet.extract(hdr.ipv4_option_timestamp, (bit<32>)tmp_len * 8 - 16);
        transition accept;
    }
    state parse_ipv4_options {
        transition select(packet.lookahead<bit<8>>()) {
            8w0x44 &&& 8w0xff: parse_ipv4_option_timestamp;
            default : accept;
        }
    }
}

parser MyEP(
    packet_in buffer,
    out EMPTY a,
    inout EMPTY b,
    in psa_egress_parser_input_metadata_t c,
    in EMPTY d,
    in EMPTY e,
    in EMPTY f) {
    state start {
        transition accept;
    }
}

control MyIC(
    inout headers_t hdr,
    inout EMPTY b,
    in psa_ingress_input_metadata_t c,
    inout psa_ingress_output_metadata_t d) {

    ActionProfile(1024) ap;
    action a1(bit<48> param) { hdr.ethernet.dstAddr = param; }
    action a2(bit<16> param) { hdr.ethernet.etherType = param; }
    table tbl {
        key = {
            hdr.ethernet.srcAddr : exact;
        }
        actions = { NoAction; a2; }
        psa_implementation = ap;
    }
    table tbl2 {
        key = {
            hdr.ethernet.srcAddr : exact;
        }
        actions = { NoAction; a1; }
        psa_implementation = ap;
    }
    apply {
        send_to_port(d, (PortId_t)0);
        tbl.apply();
        tbl2.apply();
    }
}

control MyEC(
    inout EMPTY a,
    inout EMPTY b,
    in psa_egress_input_metadata_t c,
    inout psa_egress_output_metadata_t d) {
    apply { }
}

control MyID(
    packet_out buffer,
    out EMPTY a,
    out EMPTY b,
    out EMPTY c,
    inout headers_t hdr,
    in EMPTY e,
    in psa_ingress_output_metadata_t f) {
    apply {
        buffer.emit(hdr.ethernet);
        buffer.emit(hdr.ipv4_base);
    }
}

control MyED(
    packet_out buffer,
    out EMPTY a,
    out EMPTY b,
    inout EMPTY c,
    in EMPTY d,
    in psa_egress_output_metadata_t e,
    in psa_egress_deparser_input_metadata_t f) {
    apply { }
}

IngressPipeline(MyIP(), MyIC(), MyID()) ip;
EgressPipeline(MyEP(), MyEC(), MyED()) ep;

PSA_Switch(
    ip,
    PacketReplicationEngine(),
    ep,
    BufferingQueueingEngine()) main;
\n
\n
# Packet with the option which we parse
#      port  dstAddr            srcAddr            etherType  ipv4_base                                          option    payload
packet 0     aa aa aa aa aa aa  bb bb bb bb bb bb  08 00      46 01 0202 0303 0404 64 ff ffff 0a0a0a0a 0b0b0b0b  44041122  abcdef0123456789
#      port  dstAddr            srcAddr            etherType  ipv4_base                                          payload
expect 0     aa aa aa aa aa aa  bb bb bb bb bb bb  08 00      46 01 0202 0303 0404 64 ff ffff 0a0a0a0a 0b0b0b0b  abcdef0123456789

# Packet with the option which we do not parse
#      port  dstAddr            srcAddr            etherType  ipv4_base                                          option    payload
packet 0     aa aa aa aa aa aa  bb bb bb bb bb bb  08 00      46 01 0202 0303 0404 64 ff ffff 0a0a0a0a 0b0b0b0b  45041122  abcdef0123456789
#      port  dstAddr            srcAddr            etherType  ipv4_base                                          payload
expect 0     aa aa aa aa aa aa  bb bb bb bb bb bb  08 00      46 01 0202 0303 0404 64 ff ffff 0a0a0a0a 0b0b0b0b  45041122  abcdef0123456789\n
\n
************************\n******** petr4 stf result: ********\n************************\n
/petr4/ci-test/testdata/p4_16_samples/psa-example-dpdk-varbit-bmv2.p4:2:18: fatal error: psa.p4: No such file or directory
compilation terminated.
Uncaught exception:
  
  (Failure "unexpected main value")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from P4stf__Test.run_stf.(fun) in file "p4stf/test.ml", line 160, characters 16-48
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 106, characters 31-65
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Writing temporary files into  ./tmpgo3jcov4
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpgo3jcov4/psa-example-dpdk-varbit-bmv2.json /petr4/ci-test/testdata/p4_16_samples/psa-example-dpdk-varbit-bmv2.p4
Exit code  1
Error compiling
/petr4/ci-test/testdata/p4_16_samples/psa-example-dpdk-varbit-bmv2.p4(104): [--Wwarn=ignore-prop] warning: Unknown table property: psa_implementation
        psa_implementation = ap;
        ^^^^^^^^^^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/psa-example-dpdk-varbit-bmv2.p4(111): [--Wwarn=ignore-prop] warning: Unknown table property: psa_implementation
        psa_implementation = ap;
        ^^^^^^^^^^^^^^^^^^
/usr/local/share/p4c/p4include/bmv2/psa.p4(804): [--Wwarn=invalid] warning: PSA_Switch: the main package should be called V1Switch; are you using the wrong architecture?
package PSA_Switch<IH, IM, EH, EM, NM, CI2EM, CE2EM, RESUBM, RECIRCM> (
        ^^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/psa-example-dpdk-varbit-bmv2.p4(160): [--Werror=Target model error] error: package PSA_Switch: main package  match the expected model
Are you using an up-to-date v1model.p4?
    BufferingQueueingEngine()) main;
                               ^^^^

*** Test failed

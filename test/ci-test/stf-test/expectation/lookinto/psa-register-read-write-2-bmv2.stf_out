p4 program:
\n
#include <core.p4>
#include <bmv2/psa.p4>

struct EMPTY { };

typedef bit<48>  EthernetAddress;

header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

header output_data_t {
    bit<32> word0;
    bit<32> word1;
    bit<32> word2;
    bit<32> word3;
}

struct headers_t {
    ethernet_t       ethernet;
    output_data_t    output_data;
}

struct metadata_t {
}

parser MyIP(
    packet_in pkt,
    out headers_t hdr,
    inout metadata_t user_meta,
    in psa_ingress_parser_input_metadata_t istd,
    in EMPTY resubmit_meta,
    in EMPTY recirculate_meta)
{
    state start {
        pkt.extract(hdr.ethernet);
        pkt.extract(hdr.output_data);
        transition accept;
    }
}

parser MyEP(
    packet_in pkt,
    out headers_t hdr,
    inout metadata_t user_meta,
    in psa_egress_parser_input_metadata_t istd,
    in EMPTY normal_meta,
    in EMPTY clone_i2e_meta,
    in EMPTY clone_e2e_meta)
{
    state start {
        transition accept;
    }
}

control MyIC(
    inout headers_t hdr,
    inout metadata_t user_meta,
    in    psa_ingress_input_metadata_t istd,
    inout psa_ingress_output_metadata_t ostd)
{
    Register<bit<16>, bit<8>>(6) reg;

    bit<8> idx;
    bit<8> action_type;
    bit<16> orig_data;
    bit<16> next_data;

    apply {
        if (hdr.ethernet.isValid()) {
            idx = hdr.ethernet.dstAddr[7:0];
            action_type = hdr.ethernet.dstAddr[15:8];
            bool validAction = (action_type >= 1) && (action_type <= 3);

            if (validAction) {
                orig_data = reg.read(idx);
            }
            if (action_type == 1) {
                // store a value into the register from packet header
                next_data = hdr.ethernet.dstAddr[47:32];
            } else if (action_type == 2) {
                // read register, without changing its current value
                next_data = orig_data;
            } else if (action_type == 3) {
                // increment the value currently in the register
                next_data = orig_data + 1;
            } else {
                orig_data = 0xdead;
                next_data = 0xbeef;
            }
            reg.write(idx, next_data);

            hdr.output_data.word0 = (bit<32>) orig_data;
            hdr.output_data.word1 = (bit<32>) next_data;
        }
        send_to_port(ostd, (PortId_t) 1);
    }
}

control MyEC(
    inout headers_t hdr,
    inout metadata_t user_meta,
    in    psa_egress_input_metadata_t  istd,
    inout psa_egress_output_metadata_t ostd)
{
    apply { }
}

control MyID(
    packet_out pkt,
    out EMPTY clone_i2e_meta,
    out EMPTY resubmit_meta,
    out EMPTY normal_meta,
    inout headers_t hdr,
    in metadata_t user_meta,
    in psa_ingress_output_metadata_t istd)
{
    apply {
        pkt.emit(hdr.ethernet);
        pkt.emit(hdr.output_data);
    }
}

control MyED(
    packet_out pkt,
    out EMPTY clone_e2e_meta,
    out EMPTY recirculate_meta,
    inout headers_t hdr,
    in metadata_t user_meta,
    in psa_egress_output_metadata_t istd,
    in psa_egress_deparser_input_metadata_t edstd)
{
    apply { }
}

IngressPipeline(MyIP(), MyIC(), MyID()) ip;
EgressPipeline(MyEP(), MyEC(), MyED()) ep;

PSA_Switch(
    ip,
    PacketReplicationEngine(),
    ep,
    BufferingQueueingEngine()) main;
\n
\n
# Initialize all 6 elements of register array to have the same value
# 0xcafe

packet 4 cafe 0000 01 00 010000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 01 00 010000000000 ffff   ******** 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 01 01 020000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 01 01 020000000000 ffff   ******** 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 01 02 030000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 01 02 030000000000 ffff   ******** 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 01 03 040000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 01 03 040000000000 ffff   ******** 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 01 04 050000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 01 04 050000000000 ffff   ******** 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 01 05 060000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 01 05 060000000000 ffff   ******** 0000cafe deadbeef deadbeef $


# Read all 6 of them back to confirm that they contain the value
# written.

packet 4 cafe 0000 02 00 110000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 00 110000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 01 120000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 01 120000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 02 130000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 02 130000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 03 140000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 03 140000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 04 150000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 04 150000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 05 160000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 05 160000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

# Try incrementing the register array at index 6, 8, 16, 32, and 64,
# all of which are outside the bounds of the legal index range of [0,
# 5].  Then read all values again and ensure that none of them have
# changed.

packet 4 cafe 0000 03 06 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 03 06 000000000000 ffff   ******** ******** deadbeef deadbeef

packet 4 cafe 0000 03 08 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 03 08 000000000000 ffff   ******** ******** deadbeef deadbeef

packet 4 cafe 0000 03 10 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 03 10 000000000000 ffff   ******** ******** deadbeef deadbeef

packet 4 cafe 0000 03 20 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 03 20 000000000000 ffff   ******** ******** deadbeef deadbeef

packet 4 cafe 0000 03 40 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 03 40 000000000000 ffff   ******** ******** deadbeef deadbeef


packet 4 cafe 0000 02 00 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 00 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 01 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 01 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 02 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 02 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 03 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 03 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 04 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 04 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 05 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 05 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

# Now try incrementing the value at index 5, and store a value of
# 0xf00d at index 0.  Then read all values back and ensure they have
# the expected contents.

packet 4 cafe 0000 03 05 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 03 05 000000000000 ffff   0000cafe 0000caff deadbeef deadbeef

packet 4 f00d 0000 01 00 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 f00d 0000 01 00 000000000000 ffff   0000cafe 0000f00d deadbeef deadbeef

packet 4 cafe 0000 02 00 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 00 000000000000 ffff   0000f00d 0000f00d deadbeef deadbeef $

packet 4 cafe 0000 02 01 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 01 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 02 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 02 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 03 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 03 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 04 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 04 000000000000 ffff   0000cafe 0000cafe deadbeef deadbeef $

packet 4 cafe 0000 02 05 000000000000 ffff   deadbeef deadbeef deadbeef deadbeef
expect 1 cafe 0000 02 05 000000000000 ffff   0000caff 0000caff deadbeef deadbeef $
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Uncaught exception:
  
  (Failure "architecture unsupported")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 106, characters 31-65
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Writing temporary files into  ./tmplnc_k_05
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmplnc_k_05/psa-register-read-write-2-bmv2.json /petr4/ci-test/testdata/p4_16_samples/psa-register-read-write-2-bmv2.p4
Exit code  1
Error compiling
/petr4/ci-test/testdata/p4_16_samples/psa-register-read-write-2-bmv2.p4(85): [--Wwarn=uninitialized_use] warning: orig_data may be uninitialized
                next_data = orig_data;
                            ^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/psa-register-read-write-2-bmv2.p4(88): [--Wwarn=uninitialized_use] warning: orig_data may be uninitialized
                next_data = orig_data + 1;
                            ^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/psa-register-read-write-2-bmv2.p4(95): [--Wwarn=uninitialized_use] warning: orig_data may be uninitialized
            hdr.output_data.word0 = (bit<32>) orig_data;
                                              ^^^^^^^^^
/usr/local/share/p4c/p4include/bmv2/psa.p4(804): [--Wwarn=invalid] warning: PSA_Switch: the main package should be called V1Switch; are you using the wrong architecture?
package PSA_Switch<IH, IM, EH, EM, NM, CI2EM, CE2EM, RESUBM, RECIRCM> (
        ^^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/psa-register-read-write-2-bmv2.p4(145): [--Werror=Target model error] error: package PSA_Switch: main package  match the expected model
Are you using an up-to-date v1model.p4?
    BufferingQueueingEngine()) main;
                               ^^^^

*** Test failed

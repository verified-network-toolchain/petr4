p4 program:
\n
/*
Copyright 2019 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <bmv2/psa.p4>

typedef bit<48>  EthernetAddress;

header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

struct empty_metadata_t {
}

struct metadata_t {
}

struct headers_t {
    ethernet_t       ethernet;
}

parser ingressParserImpl(packet_in packet,
                         out headers_t hdr,
                         inout metadata_t meta,
                         in psa_ingress_parser_input_metadata_t istd,
                         in empty_metadata_t resubmit_meta,
                         in empty_metadata_t recirculate_meta)
{
    state start {
        packet.extract(hdr.ethernet);
        transition accept;
    }
}

control ingressImpl(inout headers_t hdr,
                    inout metadata_t meta,
                    in    psa_ingress_input_metadata_t  istd,
                    inout psa_ingress_output_metadata_t ostd)
{
    apply {
        ostd.drop = false;
        ostd.egress_port = (PortId_t) 3;
    }
}

parser egressParserImpl(packet_in packet,
                        out headers_t hdr,
                        inout metadata_t meta,
                        in psa_egress_parser_input_metadata_t istd,
                        in empty_metadata_t normal_meta,
                        in empty_metadata_t clone_i2e_meta,
                        in empty_metadata_t clone_e2e_meta)
{
    state start {
        transition accept;
    }
}

control egressImpl(inout headers_t hdr,
                   inout metadata_t meta,
                   in    psa_egress_input_metadata_t  istd,
                   inout psa_egress_output_metadata_t ostd)
{
    apply { }
}

control CommonDeparserImpl(packet_out packet,
                           inout headers_t hdr)
{
    apply {
        packet.emit(hdr.ethernet);
    }
}

control ingressDeparserImpl(packet_out packet,
                            out empty_metadata_t clone_i2e_meta,
                            out empty_metadata_t resubmit_meta,
                            out empty_metadata_t normal_meta,
                            inout headers_t hdr,
                            in metadata_t meta,
                            in psa_ingress_output_metadata_t istd)
{
    CommonDeparserImpl() cp;
    apply {
        cp.apply(packet, hdr);
    }
}

control egressDeparserImpl(packet_out packet,
                           out empty_metadata_t clone_e2e_meta,
                           out empty_metadata_t recirculate_meta,
                           inout headers_t hdr,
                           in metadata_t meta,
                           in psa_egress_output_metadata_t istd,
                           in psa_egress_deparser_input_metadata_t edstd)
{
    CommonDeparserImpl() cp;
    apply {
        cp.apply(packet, hdr);
    }
}

IngressPipeline(ingressParserImpl(),
                ingressImpl(),
                ingressDeparserImpl()) ip;

EgressPipeline(egressParserImpl(),
               egressImpl(),
               egressDeparserImpl()) ep;

PSA_Switch(ip, PacketReplicationEngine(), ep, BufferingQueueingEngine()) main;
\n
\n
expect 3 cafed00dbead 1234567890ab ffff $
packet 0 cafed00dbead 1234567890ab ffff

expect 3 a5a5a5a5a5a5 1b1b1b1b1b1b ffff $
packet 1 a5a5a5a5a5a5 1b1b1b1b1b1b ffff

expect 3 314159265358 271828182845 ffff $
packet 2 314159265358 271828182845 ffff

expect 3 0000ffff0000 ffff0000ffff ffff $
packet 3 0000ffff0000 ffff0000ffff ffff
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Uncaught exception:
  
  (Failure "architecture unsupported")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 106, characters 31-65
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Writing temporary files into  ./tmpt37ciy3c
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpt37ciy3c/psa-top-level-assignments-bmv2.json /petr4/ci-test/testdata/p4_16_samples/psa-top-level-assignments-bmv2.p4
Exit code  1
Error compiling
/usr/local/share/p4c/p4include/bmv2/psa.p4(804): [--Wwarn=invalid] warning: PSA_Switch: the main package should be called V1Switch; are you using the wrong architecture?
package PSA_Switch<IH, IM, EH, EM, NM, CI2EM, CE2EM, RESUBM, RECIRCM> (
        ^^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/psa-top-level-assignments-bmv2.p4(127): [--Werror=Target model error] error: package PSA_Switch: main package  match the expected model
Are you using an up-to-date v1model.p4?
PSA_Switch(ip, PacketReplicationEngine(), ep, BufferingQueueingEngine()) main;
                                                                         ^^^^

*** Test failed

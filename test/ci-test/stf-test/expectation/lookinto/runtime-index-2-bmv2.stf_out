p4 program:
\n
/*
* Copyright 2020, MNK Labs & Consulting
* http://mnkcg.com
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#include <v1model.p4>

typedef bit<48> mac_addr_t;

header ethernet_t {
    mac_addr_t dstAddr;
    mac_addr_t srcAddr;
    bit<16>    etherType;
}

header ml_hdr_t {
    bit<8> idx1;
    bit<8> idx2;
}

header vec_e_t {
    bit<8> e;
}

struct headers {
    ethernet_t ethernet;
    ml_hdr_t   ml;
    vec_e_t[8] vector;
}

struct metadata_t {
}

parser MyParser(packet_in packet, out headers hdr, inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    state start {
        packet.extract(hdr.ethernet);
        packet.extract(hdr.ml);
        packet.extract(hdr.vector[0]);
        packet.extract(hdr.vector[1]);
        packet.extract(hdr.vector[2]);
        packet.extract(hdr.vector[3]);
        packet.extract(hdr.vector[4]);
        packet.extract(hdr.vector[5]);
        packet.extract(hdr.vector[6]);
        packet.extract(hdr.vector[7]);
	transition accept;
    }
}

control ingress(inout headers hdr, inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    apply {
        // Test runtime index with arithmetic expression as index, as
        // L-value.
        hdr.vector[hdr.ml.idx1 - (hdr.ml.idx2 >> 8w1)].e =
            hdr.ethernet.etherType[15:8] + 7;
        // similar, but with runtime index as R-value.
        hdr.ethernet.etherType[7:0] = hdr.vector[(hdr.ml.idx2 ^ 8w0x07) & 8w0x7].e;

        // Test runtime index with arithmetic expression as index,
        // where that arithmetic expression includes another header
        // stack index with a runtime variable value.
        hdr.vector[hdr.vector[hdr.ethernet.dstAddr[39:32] & 0x7].e & 0x7].e =
            hdr.ethernet.dstAddr[47:40];
    }
}

control egress(inout headers hdr, inout metadata_t meta,
               inout standard_metadata_t standard_metadata) {
    apply {}
}

control MyVerifyChecksum(inout headers hdr, inout metadata_t meta) {
    apply {}
}

control MyComputeChecksum(inout headers hdr, inout metadata_t meta) {
    apply {}
}

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr);
    }
}

V1Switch(MyParser(), MyVerifyChecksum(), ingress(), egress(),
MyComputeChecksum(), MyDeparser()) main;
\n
\n
######################################################################

packet 0 ca0107fc001c111111111111f00d 0805 01234567 89abcdef
#                                     ^^ ml.idx1    ^^ vector[4]
#                                       ^^ ml.idx2        ^^ vector[7]
#                                          ^^ vector[0]
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ethernet

# Just before assignment:
#       hdr.vector[hdr.ml.idx1 - (hdr.ml.idx2 >> 1)].e =
#           hdr.ethernet.etherType[15:8] + 7;
# value of hdr.ml.idx1 - (hdr.ml.idx2 >> 1) = 0x08 - (0x05 >> 1) = 8 - 2 = 6
# After assignment:
#                                               changed VV
#        ca0107fc001c111111111111f00d 0805 01234567 89abf7ef

# Just before assignment:
#       hdr.ethernet.etherType[7:0] = hdr.vector[(hdr.ml.idx2 ^ 0x07) & 0x7].e;
#       (hdr.ml.idx2 ^ 0x07) & 0x7 = (0x05 ^ 0x07) & 0x7 = 2 & 7 = 2
# After assignment:
#                          changed VV
#        ca0107fc001c111111111111f045 0805 01234567 89abf7ef

# Just before assignment:
#       hdr.vector[hdr.vector[hdr.ethernet.dstAddr[39:32] & 0x7].e & 0x7].e =
#           hdr.ethernet.dstAddr[47:40];
#       hdr.ethernet.dstAddr[39:32] & 0x7 = 0x01 & 0x7 = 1
#       hdr.vector[1].e & 0x7 = 0x23 & 0x7 = 3
#                                        changed VV
#        ca0107fc001c111111111111f045 0805 012345ca 89abf7ef

expect 0 ca0107fc001c111111111111f045 0805 012345ca 89abf7ef $

######################################################################

packet 0 cafa07fc001c111111111111cafe 61b8 01234567 89abcdef
#                                     ^^ ml.idx1    ^^ vector[4]
#                                       ^^ ml.idx2        ^^ vector[7]
#                                          ^^ vector[0]
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ethernet

# Just before assignment:
#       hdr.vector[hdr.ml.idx1 - (hdr.ml.idx2 >> 1)].e =
#           hdr.ethernet.etherType[15:8] + 7;
# value of hdr.ml.idx1 - (hdr.ml.idx2 >> 1) = 0x61 - (0xb8 >> 1) = 97 - 92 = 5
# After assignment:
#                                             changed VV
#        cafa07fc001c111111111111cafe 61b8 01234567 89d1cdef

# Just before assignment:
#       hdr.ethernet.etherType[7:0] = hdr.vector[(hdr.ml.idx2 ^ 0x07) & 0x7].e;
#       (hdr.ml.idx2 ^ 0x07) & 0x7 = (0xb8 ^ 0x07) & 0x7 = 0xbf & 0x7 = 7
# After assignment:
#                          changed VV
#        cafa07fc001c111111111111caef 61b8 01234567 89cacdef

# Just before assignment:
#       hdr.vector[hdr.vector[hdr.ethernet.dstAddr[39:32] & 0x7].e & 0x7].e =
#           hdr.ethernet.dstAddr[47:40];
#       hdr.ethernet.dstAddr[39:32] & 0x7 = 0xfa & 0x7 = 2
#       hdr.vector[2].e & 0x7 = 0x45 & 0x7 = 5
#                                             changed VV
#        cafa07fc001c111111111111caef 61b8 01234567 89cacdef

expect 0 cafA07fc001c111111111111caef 61b8 01234567 89cacdef $
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt cafa07fc001c111111111111caef61b80123456789cacdef

Packet matched the expected packet.
Packet:   port 0 pkt ca0107fc001c111111111111f0450805012345ca89abf7ef
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpxe0u9o5b
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpxe0u9o5b/runtime-index-2-bmv2.json /petr4/ci-test/testdata/p4_16_samples/runtime-index-2-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9280 --device-id 190 -i 0@pcap0 .././tmpxe0u9o5b/runtime-index-2-bmv2.json
Running simple_switch_CLI --thrift-port 9280
STF Command: packet 0 ca0107fc001c111111111111f00d 0805 01234567 89abcdef
STF Command: expect 0 ca0107fc001c111111111111f045 0805 012345ca 89abf7ef $
STF Command: packet 0 cafa07fc001c111111111111cafe 61b8 01234567 89abcdef
STF Command: expect 0 cafA07fc001c111111111111caef 61b8 01234567 89cacdef $
simple_switch exit code -15
Execution completed
Comparing outputs

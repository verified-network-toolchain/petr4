p4 program:
\n
/*
Copyright 2020 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

header hdr {
    bit<8>  e;
    bit<16> t;
    bit<8>  l;
    bit<8> r;
    bit<8>  v;
}

struct Header_t {
    hdr h;
}
struct Meta_t {}

parser p(packet_in b, out Header_t h, inout Meta_t m, inout standard_metadata_t sm) {
    state start {
        b.extract(h.h);
        transition accept;
    }
}

control vrfy(inout Header_t h, inout Meta_t m) { apply {} }
control update(inout Header_t h, inout Meta_t m) { apply {} }
control egress(inout Header_t h, inout Meta_t m, inout standard_metadata_t sm) { apply {} }
control deparser(packet_out b, in Header_t h) { apply { b.emit(h.h); } }

control ingress(inout Header_t h, inout Meta_t m, inout standard_metadata_t standard_meta) {

    action a() { standard_meta.egress_spec = 0; }
    action a_with_control_params(bit<9> x) { standard_meta.egress_spec = x; }


    table t_optional {

  	key = {
            h.h.e : optional;
            h.h.t : optional;
        }

	actions = {
            a;
            a_with_control_params;
        }

	default_action = a;

        const entries = {
            (0xaa, 0x1111) : a_with_control_params(1);
            (   _, 0x1111) : a_with_control_params(2);
            (0xaa,      _) : a_with_control_params(3);
            // test default entries
            (   _,      _) : a_with_control_params(4);
        }
    }

    apply {
        t_optional.apply();
    }
}


V1Switch(p(), vrfy(), ingress(), egress(), update(), deparser()) main;
\n
\n
# header hdr { bit<8>  e; bit<16> t; bit<8>  l; bit<8> r; bit<1>  v; }

# t_optional tests: if packets come on port 0, we missed!

expect 1 aa **** ** ** ** $
packet 0 aa 1111 00 00 b0

expect 2 ab **** ** ** ** $
packet 0 ab 1111 00 00 b0

expect 3 aa **** ** ** ** $
packet 0 aa 1112 00 00 b0

expect 4 a9 **** ** ** ** $
packet 0 a9 1110 00 00 b0
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 4 pkt a911100000b0

Packet matched the expected packet.
Packet:   port 3 pkt aa11120000b0

Packet matched the expected packet.
Packet:   port 2 pkt ab11110000b0

Packet matched the expected packet.
Packet:   port 1 pkt aa11110000b0
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Adding interface pcap1 as port 1 (files)
Adding interface pcap2 as port 2 (files)
Adding interface pcap3 as port 3 (files)
Adding interface pcap4 as port 4 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpyix3c0b_
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpyix3c0b_/table-entries-optional-bmv2.json /petr4/ci-test/testdata/p4_16_samples/table-entries-optional-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9589 --device-id 499 -i 0@pcap0 -i 1@pcap1 -i 2@pcap2 -i 3@pcap3 -i 4@pcap4 .././tmpyix3c0b_/table-entries-optional-bmv2.json
Running simple_switch_CLI --thrift-port 9589
STF Command: expect 1 aa **** ** ** ** $
STF Command: packet 0 aa 1111 00 00 b0
STF Command: expect 2 ab **** ** ** ** $
STF Command: packet 0 ab 1111 00 00 b0
STF Command: expect 3 aa **** ** ** ** $
STF Command: packet 0 aa 1112 00 00 b0
STF Command: expect 4 a9 **** ** ** ** $
STF Command: packet 0 a9 1110 00 00 b0
simple_switch exit code -15
Execution completed
Comparing outputs

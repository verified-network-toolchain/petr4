p4 program:
\n
/*
Copyright 2019-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

enum bit<8> MyEnum1B {
    MBR1 = 0,
    MBR2 = 0xff
}

enum bit<16> MyEnum2B {
    MBR1 = 10,
    MBR2 = 0xab00
}

header hdr {
    MyEnum1B f1;
    MyEnum2B f2;
}

struct Header_t {
    hdr h;
}
struct Meta_t {}

parser p(packet_in b, out Header_t h, inout Meta_t m, inout standard_metadata_t sm) {
    state start {
        b.extract(h.h);
        transition accept;
    }
}

control vrfy(inout Header_t h, inout Meta_t m) { apply {} }
control update(inout Header_t h, inout Meta_t m) { apply {} }
control egress(inout Header_t h, inout Meta_t m, inout standard_metadata_t sm) { apply {} }
control deparser(packet_out b, in Header_t h) { apply { b.emit(h.h); } }

control ingress(inout Header_t h, inout Meta_t m, inout standard_metadata_t standard_meta) {

    action a() { standard_meta.egress_spec = 0; }
    action a_with_control_params(bit<9> x) { standard_meta.egress_spec = x; }


    table t_ternary {

  	key = {
            h.h.f1 : exact;
            h.h.f2 : ternary;
        }

	actions = {
            a;
            a_with_control_params;
        }

	const default_action = a();

        const entries = {
            (MyEnum1B.MBR1, _)                           : a_with_control_params(1);
            (MyEnum1B.MBR2, MyEnum2B.MBR2 &&& 0xff00)    : a_with_control_params(2);
            (MyEnum1B.MBR2, _)                           : a_with_control_params(3);
        }
    }

    apply {
        t_ternary.apply();
    }
}


V1Switch(p(), vrfy(), ingress(), egress(), update(), deparser()) main;
\n
\n
# enum bit<8> MyEnum1B { MBR1 = 0, MBR2 = 0xff }
# enum bit<16> MyEnum2B { MBR1 = 10, MBR2 = 0xab00 }
# header hdr { MyEnum1B f1; MyEnum2B f2; }

expect 1 00 1111 $
packet 0 00 1111

expect 2 ff ab00 $
packet 0 ff ab00

expect 2 ff abcd $
packet 0 ff abcd

expect 3 ff afff $
packet 0 ff afff

# miss

expect 0 ab 0000 $
packet 0 ab 0000
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 0 pkt ab0000

Packet matched the expected packet.
Packet:   port 3 pkt ffafff

Packet matched the expected packet.
Packet:   port 2 pkt ffabcd

Packet matched the expected packet.
Packet:   port 2 pkt ffab00

Packet matched the expected packet.
Packet:   port 1 pkt 001111
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Adding interface pcap1 as port 1 (files)
Adding interface pcap2 as port 2 (files)
Adding interface pcap3 as port 3 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpzs25mrti
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpzs25mrti/table-entries-ser-enum-bmv2.json /petr4/ci-test/testdata/p4_16_samples/table-entries-ser-enum-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 10014 --device-id 924 -i 0@pcap0 -i 1@pcap1 -i 2@pcap2 -i 3@pcap3 .././tmpzs25mrti/table-entries-ser-enum-bmv2.json
Running simple_switch_CLI --thrift-port 10014
STF Command: expect 1 00 1111 $
STF Command: packet 0 00 1111
STF Command: expect 2 ff ab00 $
STF Command: packet 0 ff ab00
STF Command: expect 2 ff abcd $
STF Command: packet 0 ff abcd
STF Command: expect 3 ff afff $
STF Command: packet 0 ff afff
STF Command: expect 0 ab 0000 $
STF Command: packet 0 ab 0000
simple_switch exit code -15
Execution completed
Comparing outputs

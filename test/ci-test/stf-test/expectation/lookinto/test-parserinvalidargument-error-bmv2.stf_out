p4 program:
\n
/*
Copyright 2019 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

typedef bit<48>  EthernetAddress;

header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

header custom_var_len_t {
    varbit<16> options;
}

struct headers_t {
    ethernet_t       ethernet;
    custom_var_len_t custom_var_len;
}

struct metadata_t {
}

parser parserImpl(packet_in packet,
                  out headers_t hdr,
                  inout metadata_t meta,
                  inout standard_metadata_t stdmeta)
{
    state start {
        packet.extract(hdr.ethernet);
        transition parse_custom_variable_len_header;
    }
    state parse_custom_variable_len_header {
        packet.extract(hdr.custom_var_len,
            (bit<32>) hdr.ethernet.etherType[7:0]);
        transition accept;
    }
}

control verifyChecksum(inout headers_t hdr, inout metadata_t meta) {
    apply { }
}

control ingressImpl(inout headers_t hdr,
                    inout metadata_t meta,
                    inout standard_metadata_t stdmeta)
{
    bit<8> error_as_int;
    apply {
        stdmeta.egress_spec = 1;
        if (stdmeta.parser_error == error.NoError) {
            error_as_int = 0;
        } else if (stdmeta.parser_error == error.PacketTooShort) {
            error_as_int = 1;
        } else if (stdmeta.parser_error == error.NoMatch) {
            error_as_int = 2;
        } else if (stdmeta.parser_error == error.StackOutOfBounds) {
            error_as_int = 3;
        } else if (stdmeta.parser_error == error.HeaderTooShort) {
            error_as_int = 4;
        } else if (stdmeta.parser_error == error.ParserTimeout) {
            error_as_int = 5;
        } else if (stdmeta.parser_error == error.ParserInvalidArgument) {
            error_as_int = 6;
        } else {
            // This should not happen, but just in case, it would be
            // good to have evidence that this case happened, and not
            // some other.
            error_as_int = 7;
        }
        hdr.ethernet.dstAddr[7:0] = error_as_int;
    }
}

control egressImpl(inout headers_t hdr,
                   inout metadata_t meta,
                   inout standard_metadata_t stdmeta)
{
    apply { }
}

control updateChecksum(inout headers_t hdr, inout metadata_t meta) {
    apply { }
}

control deparserImpl(packet_out packet,
                     in headers_t hdr)
{
    apply {
        packet.emit(hdr.ethernet);
        // Intentionally _do not_ emit hdr.custom_var_len, so an STF
        // test can be used to determine which part of the input
        // packet was parsed as that header.
    }
}

V1Switch(parserImpl(),
         verifyChecksum(),
         ingressImpl(),
         egressImpl(),
         updateChecksum(),
         deparserImpl()) main;
\n
\n
# Parser should get no error, and extract 0-length custom header
packet 2 ffffffffffff a5a5a5a5a5a5 0000 deadbeef
expect 1 ffffffffff00 a5a5a5a5a5a5 0000 deadbeef $

# Parser should get no error, and extract 8-bit long custom header
packet 2 ffffffffffff a5a5a5a5a5a5 0008 5a deadbeef
expect 1 ffffffffff00 a5a5a5a5a5a5 0008 deadbeef $

# Parser should get no error, and extract 16-bit long custom header
packet 2 ffffffffffff a5a5a5a5a5a5 0010 5a5a deadbeef
expect 1 ffffffffff00 a5a5a5a5a5a5 0010 deadbeef $

# Parser should experience error HeaderTooShort.
packet 2 ffffffffffff a5a5a5a5a5a5 0018 5a5a5a deadbeef
expect 1 ffffffffff04 a5a5a5a5a5a5 0018 5a5a5a deadbeef $

# Parser should experience error PacketTooShort.
packet 2 ffffffffffff a5a5a5a5a5a5 0010 5a
expect 1 ffffffffff01 a5a5a5a5a5a5 0010 5a $

# Parser should experience error ParserInvalidArgument.
packet 2 ffffffffffff a5a5a5a5a5a5 0001 deadbeef
expect 1 ffffffffff06 a5a5a5a5a5a5 0001 deadbeef $

# Parser should experience error ParserInvalidArgument.
packet 2 ffffffffffff a5a5a5a5a5a5 0007 deadbeef
expect 1 ffffffffff06 a5a5a5a5a5a5 0007 deadbeef $
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
Packet matched the expected packet.
Packet:   port 1 pkt ffffffffff06a5a5a5a5a5a50007deadbeef

Packet matched the expected packet.
Packet:   port 1 pkt ffffffffff06a5a5a5a5a5a50001deadbeef

Packet matched the expected packet.
Packet:   port 1 pkt ffffffffff01a5a5a5a5a5a500105a

Packet matched the expected packet.
Packet:   port 1 pkt ffffffffff04a5a5a5a5a5a500185a5a5adeadbeef

Packet matched the expected packet.
Packet:   port 1 pkt ffffffffff00a5a5a5a5a5a50010deadbeef

Packet matched the expected packet.
Packet:   port 1 pkt ffffffffff00a5a5a5a5a5a50008deadbeef

Packet matched the expected packet.
Packet:   port 1 pkt ffffffffff00a5a5a5a5a5a50000deadbeef
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap1 as port 1 (files)
Adding interface pcap2 as port 2 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmpv44qb_go
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmpv44qb_go/test-parserinvalidargument-error-bmv2.json /petr4/ci-test/testdata/p4_16_samples/test-parserinvalidargument-error-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9855 --device-id 765 -i 1@pcap1 -i 2@pcap2 .././tmpv44qb_go/test-parserinvalidargument-error-bmv2.json
Running simple_switch_CLI --thrift-port 9855
STF Command: packet 2 ffffffffffff a5a5a5a5a5a5 0000 deadbeef
STF Command: expect 1 ffffffffff00 a5a5a5a5a5a5 0000 deadbeef $
STF Command: packet 2 ffffffffffff a5a5a5a5a5a5 0008 5a deadbeef
STF Command: expect 1 ffffffffff00 a5a5a5a5a5a5 0008 deadbeef $
STF Command: packet 2 ffffffffffff a5a5a5a5a5a5 0010 5a5a deadbeef
STF Command: expect 1 ffffffffff00 a5a5a5a5a5a5 0010 deadbeef $
STF Command: packet 2 ffffffffffff a5a5a5a5a5a5 0018 5a5a5a deadbeef
STF Command: expect 1 ffffffffff04 a5a5a5a5a5a5 0018 5a5a5a deadbeef $
STF Command: packet 2 ffffffffffff a5a5a5a5a5a5 0010 5a
STF Command: expect 1 ffffffffff01 a5a5a5a5a5a5 0010 5a $
STF Command: packet 2 ffffffffffff a5a5a5a5a5a5 0001 deadbeef
STF Command: expect 1 ffffffffff06 a5a5a5a5a5a5 0001 deadbeef $
STF Command: packet 2 ffffffffffff a5a5a5a5a5a5 0007 deadbeef
STF Command: expect 1 ffffffffff06 a5a5a5a5a5a5 0007 deadbeef $
simple_switch exit code -15
Execution completed
Comparing outputs

/petr4/ci-test/testdata/p4_16_samples/fabric_20190420/include/control/forwarding.p4
\n
/*
 * Copyright 2017-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <core.p4>
#include <v1model.p4>

#include "../define.p4"
#include "../header.p4"


control Forwarding (inout parsed_headers_t hdr,
                    inout fabric_metadata_t fabric_metadata,
                    inout standard_metadata_t standard_metadata) {

    @hidden
    action set_next_id(next_id_t next_id) {
        fabric_metadata.next_id = next_id;
    }

    /*
     * Bridging Table.
     */
    direct_counter(CounterType.packets_and_bytes) bridging_counter;

    action set_next_id_bridging(next_id_t next_id) {
        set_next_id(next_id);
        bridging_counter.count();
    }

    // FIXME: using ternary for eth_dst prevents our ability to scale in
    //  bridging heavy environments. Do we really need ternary? Can we come up
    //  with a multi-table/algorithmic approach?
    table bridging {
        key = {
            fabric_metadata.vlan_id: exact @name("vlan_id");
            hdr.ethernet.dst_addr: ternary @name("eth_dst");
        }
        actions = {
            set_next_id_bridging;
            @defaultonly nop;
        }
        const default_action = nop();
        counters = bridging_counter;
        size = BRIDGING_TABLE_SIZE;
    }

    /*
     * MPLS Table.
     */
    direct_counter(CounterType.packets_and_bytes) mpls_counter;

    action pop_mpls_and_next(next_id_t next_id) {
        fabric_metadata.mpls_label = 0;
        set_next_id(next_id);
        mpls_counter.count();
    }

    table mpls {
        key = {
            fabric_metadata.mpls_label: exact @name("mpls_label");
        }
        actions = {
            pop_mpls_and_next;
            @defaultonly nop;
        }
        const default_action = nop();
        counters = mpls_counter;
        size = MPLS_TABLE_SIZE;
    }

    /*
     * IPv4 Routing Table.
     */
    direct_counter(CounterType.packets_and_bytes) routing_v4_counter;

    action set_next_id_routing_v4(next_id_t next_id) {
        set_next_id(next_id);
        routing_v4_counter.count();
    }

    action nop_routing_v4() {
        routing_v4_counter.count();
    }

    #ifdef _ROUTING_V4_TABLE_ANNOT
    _ROUTING_V4_TABLE_ANNOT
    #endif
    table routing_v4 {
        key = {
            hdr.ipv4.dst_addr: lpm @name("ipv4_dst");
        }
        actions = {
            set_next_id_routing_v4;
            nop_routing_v4;
            @defaultonly nop;
        }
        const default_action = nop();
        counters = routing_v4_counter;
        size = ROUTING_V4_TABLE_SIZE;
    }

#ifdef WITH_IPV6
    /*
     * IPv6 Routing Table.
     */
    direct_counter(CounterType.packets_and_bytes) routing_v6_counter;

    action set_next_id_routing_v6(next_id_t next_id) {
        set_next_id(next_id);
        routing_v6_counter.count();
    }

    table routing_v6 {
        key = {
            hdr.ipv6.dst_addr: lpm @name("ipv6_dst");
        }
        actions = {
            set_next_id_routing_v6;
            @defaultonly nop;
        }
        const default_action = nop();
        counters = routing_v6_counter;
        size = ROUTING_V6_TABLE_SIZE;
    }
#endif // WITH_IPV6

    apply {
        if (fabric_metadata.fwd_type == FWD_BRIDGING) bridging.apply();
        else if (fabric_metadata.fwd_type == FWD_MPLS) mpls.apply();
        else if (fabric_metadata.fwd_type == FWD_IPV4_UNICAST) routing_v4.apply();
#ifdef WITH_IPV6
        else if (fabric_metadata.fwd_type == FWD_IPV6_UNICAST) routing_v6.apply();
#endif // WITH_IPV6
    }
}
************************\n******** petr4 type checking result: ********\n************************\n
Uncaught exception:
  
  Petr4.Prog.Env.UnboundName("BRIDGING_TABLE_SIZE")

Raised at Petr4__Prog.Env.raise_unbound in file "lib/prog.ml", line 1647, characters 4-32
Called from Petr4__Checker.type_expression in file "lib/checker.ml", line 888, characters 22-54
Called from Petr4__Checker.type_table' in file "lib/checker.ml", line 4215, characters 23-57
Called from Petr4__Checker.type_table in file "lib/checker.ml" (inlined), line 3921, characters 2-77
Called from Petr4__Checker.type_declaration in file "lib/checker.ml", line 4713, characters 5-56
Called from Petr4__Checker.type_declarations.f in file "lib/checker.ml", line 4746, characters 26-55
Called from Stdlib__list.fold_left in file "list.ml", line 121, characters 24-34
Called from Base__List0.fold in file "src/list0.ml" (inlined), line 21, characters 22-52
Called from Petr4__Checker.type_declarations in file "lib/checker.ml", line 4749, characters 19-58
Called from Petr4__Checker.open_control_scope in file "lib/checker.ml", line 3689, characters 26-73
Called from Petr4__Checker.type_control in file "lib/checker.ml", line 3698, characters 6-69
Called from Petr4__Checker.type_declarations.f in file "lib/checker.ml", line 4746, characters 26-55
Called from Stdlib__list.fold_left in file "list.ml", line 121, characters 24-34
Called from Base__List0.fold in file "src/list0.ml" (inlined), line 21, characters 22-52
Called from Petr4__Checker.type_declarations in file "lib/checker.ml", line 4749, characters 19-58
Called from Petr4__Checker.check_program in file "lib/checker.ml", line 4756, characters 18-78
Called from Common.Make_parse.check_file' in file "bin/common.ml", line 64, characters 17-51
Called from Common.Make_parse.check_file in file "bin/common.ml", line 77, characters 10-50
Called from Main.check_command.(fun) in file "bin/main.ml", line 68, characters 14-65
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c type checking result: ********\n************************\n
/petr4/ci-test/testdata/p4_16_samples/fabric_20190420/include/control/forwarding.p4(57): [--Werror=not-found] error: BRIDGING_TABLE_SIZE: declaration not found
        size = BRIDGING_TABLE_SIZE;
               ^^^^^^^^^^^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/fabric_20190420/include/control/forwarding.p4(81): [--Werror=not-found] error: MPLS_TABLE_SIZE: declaration not found
        size = MPLS_TABLE_SIZE;
               ^^^^^^^^^^^^^^^
/petr4/ci-test/testdata/p4_16_samples/fabric_20190420/include/control/forwarding.p4(112): [--Werror=not-found] error: ROUTING_V4_TABLE_SIZE: declaration not found
        size = ROUTING_V4_TABLE_SIZE;
               ^^^^^^^^^^^^^^^^^^^^^

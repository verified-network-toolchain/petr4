/petr4/ci-test/testdata/p4_16_samples/issue2726-bmv2.p4
\n
/*
* Copyright 2020, MNK Labs & Consulting
* http://mnkcg.com
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#include <v1model.p4>

typedef bit<48> mac_addr_t;

header aggregator_t {
    bit<8> base0;
    bit<8> base1;
    bit<8> base2;
    bit<8> base3;
    bit<8> val;
}
header vec_e_t {
    bit<8> e;
}

header ml_hdr_t {
    int<8> idx;
}

header ethernet_t {
    mac_addr_t dstAddr;
    mac_addr_t srcAddr;
    bit<16>    etherType;
}

struct headers {
    ethernet_t ethernet;
    ml_hdr_t   ml;
    vec_e_t[3] vector;
    aggregator_t[3] pool;
}

struct metadata_t {
    int<8> counter;
}

parser MyParser(packet_in packet, out headers hdr, inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    state start {
        packet.extract(hdr.ethernet);
        packet.extract(hdr.ml);
        packet.extract(hdr.vector[0]);
        packet.extract(hdr.vector[1]);
        packet.extract(hdr.vector[2]);
        packet.extract(hdr.pool[0]);
        packet.extract(hdr.pool[1]);
        packet.extract(hdr.pool[2]);
        meta.counter = 0;
	transition accept;
    }
}

enum int<8> Index_t {
    ZERO = 0,
    ONE = 1,
    TWO = 2
}

control ingress(inout headers hdr, inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    apply {
        // Legacy programs should not break
        meta.counter = meta.counter + 1;
        hdr.vector[0].e = hdr.pool[1].val + 1;
        // end legacy test.
        Index_t i = (Index_t) hdr.ml.idx;

        // Test runtime index as l-value.
        hdr.pool[i].val = hdr.vector[0].e;
        hdr.pool[i].base2 = hdr.vector[0].e;
        // Test runtime index as r-value.
        hdr.vector[1].e = hdr.pool[i].base0;
        // Test runtime index as l- and r-values.
        hdr.pool[i].base0 = hdr.pool[i].base1 + 1;
        standard_metadata.egress_spec = standard_metadata.ingress_port;
    }
}

control egress(inout headers hdr, inout metadata_t meta,
               inout standard_metadata_t standard_metadata) {
    apply {}
}

control MyVerifyChecksum(inout headers hdr, inout metadata_t meta) {
    apply {}
}

control MyComputeChecksum(inout headers hdr, inout metadata_t meta) {
    apply {}
}

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr);
    }
}

V1Switch(MyParser(), MyVerifyChecksum(), ingress(), egress(),
MyComputeChecksum(), MyDeparser()) main;
************************\n******** petr4 type checking result: ********\n************************\n
Uncaught exception:
  
  (lib/error.ml.Type
   ((I (filename /petr4/ci-test/testdata/p4_16_samples/issue2726-bmv2.p4)
     (line_start 87) (line_end ()) (col_start 17) (col_end 18))
    (Mismatch (expected integer)
     (found
      (TypeName
       (BareName (tags (M ""))
        (name
         ((tags
           (I
            (filename
             /petr4/ci-test/testdata/p4_16_samples/issue2726-bmv2.p4)
            (line_start 84) (line_end ()) (col_start 8) (col_end 15)))
          (string Index_t)))))))))

Raised at Petr4__Error.raise_mismatch in file "lib/error.ml", line 37, characters 2-26
Called from Petr4__Checker.type_array_access in file "lib/checker.ml", line 1739, characters 2-60
Called from Petr4__Checker.type_expression_member in file "lib/checker.ml", line 2605, characters 19-47
Called from Petr4__Checker.type_assignment in file "lib/checker.ml", line 3287, characters 18-50
Called from Petr4__Checker.type_statement in file "lib/checker.ml", line 3233, characters 7-38
Called from Petr4__Checker.type_statements.fold in file "lib/checker.ml", line 3369, characters 26-58
Called from Stdlib__list.fold_left in file "list.ml", line 121, characters 24-34
Called from Petr4__Checker.type_block in file "lib/checker.ml", line 3381, characters 27-67
Called from Petr4__Checker.type_control in file "lib/checker.ml", line 3700, characters 29-61
Called from Petr4__Checker.type_declarations.f in file "lib/checker.ml", line 4746, characters 26-55
Called from Stdlib__list.fold_left in file "list.ml", line 121, characters 24-34
Called from Base__List0.fold in file "src/list0.ml" (inlined), line 21, characters 22-52
Called from Petr4__Checker.type_declarations in file "lib/checker.ml", line 4749, characters 19-58
Called from Petr4__Checker.check_program in file "lib/checker.ml", line 4756, characters 18-78
Called from Common.Make_parse.check_file' in file "bin/common.ml", line 64, characters 17-51
Called from Common.Make_parse.check_file in file "bin/common.ml", line 77, characters 10-50
Called from Main.check_command.(fun) in file "bin/main.ml", line 68, characters 14-65
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c type checking result: ********\n************************\n
[--Werror=not-found] error: verify: declaration not found

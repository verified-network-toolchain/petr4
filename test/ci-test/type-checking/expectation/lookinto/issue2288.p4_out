/petr4/ci-test/testdata/p4_16_samples/issue2288.p4
\n
#include <core.p4>

struct Headers {
    bit<8> a;
    bit<8> b;
}

bit<8> f(inout bit<8> x, in bit<8> z) {
    return 8w4;
}

bit<8> g(inout bit<8> z) {
    z = 8w3;
    return 8w1;
}

control ingress(inout Headers h) {
    action a() { h.b = 0; }
    table t {
        key = { h.b: exact; }
        actions = { a; }
        default_action = a;
    }
    apply {
        f(h.a, t.apply().hit ? h.a : h.b);
        f(h.a, g(h.a));
    }
}

control c<T>(inout T d);
package top<T>(c<T> _c);

top(ingress()) main;
************************\n******** petr4 type checking result: ********\n************************\n
error {
  NoError, PacketTooShort, NoMatch, StackOutOfBounds, HeaderTooShort,
  ParserTimeout, ParserInvalidArgument
}
extern packet_in {
  void extract<T>(out T hdr);
  void extract<T0>(out T0 variableSizeHeader,
                   in bit<32> variableFieldSizeInBits);
  T1 lookahead<T1>();
  void advance(in bit<32> sizeInBits);
  bit<32> length();
}

extern packet_out {
  void emit<T2>(in T2 hdr);
}

extern void verify(in bool check, in error toSignal);
@noWarn("unused")
action NoAction() { 
}
match_kind {
  exact, ternary, lpm
}
struct Headers {
  bit<8> a;
  bit<8> b;
}
bit<8> f (inout bit<8> x, in bit<8> z) {
  return 8w4;
}
bit<8> g (inout bit<8> z) {
  z = 8w3;
  return 8w1;
}
control ingress(inout Headers h) {
  action a() {
    h.b = 0;
  }
  table t {
    key = {
      h.b: exact;
    }
    actions = {
      a;
    }
    default_action = a;
  }
  apply {
    f(h.a, (t.apply().hit ? h.a : h.b));
    f(h.a, g(h.a));
  }
}
control c<T3> (inout T3 d);
package top<T4> (c<T4> _c);
top(ingress()) main;
************************\n******** p4c type checking result: ********\n************************\n
/petr4/ci-test/testdata/p4_16_samples/issue2288.p4(26): [--Wwarn=ordering] warning: h.a: 'out' argument has fields in common with h.a
        f(h.a, g(h.a));
          ^^^
/petr4/ci-test/testdata/p4_16_samples/issue2288.p4(26)
        f(h.a, g(h.a));
                 ^^^

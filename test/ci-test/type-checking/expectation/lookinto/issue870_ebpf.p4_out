/petr4/ci-test/testdata/p4_16_samples/issue870_ebpf.p4
\n
/*
Copyright 2013-present Barefoot Networks, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <ebpf_model.p4>
#include <core.p4>

#include "ebpf_headers.p4"

struct Headers_t
{
    Ethernet_h ethernet;
    IPv4_h     ipv4;
}

parser prs(packet_in p, out Headers_t headers)
{
    state start
    {
        p.extract(headers.ethernet);
        transition select(headers.ethernet.etherType)
        {
            16w0x800 : ip;
            default : reject;
        }
    }

    state ip
    {
        p.extract(headers.ipv4);
        transition accept;
    }
}

control pipe(inout Headers_t headers, out bool pass)
{
    action Reject(IPv4Address add)
    {
        pass = false;
        headers.ipv4.srcAddr[31:0] = add[31:16] ++ add[15:0];
    }

    table Check_src_ip {
        key = { headers.ipv4.srcAddr : exact; }
        actions =
        {
            Reject;
            NoAction;
        }

        implementation = hash_table(1024);
        const default_action = NoAction;
    }

    apply {
        pass = true;

        if (!headers.ipv4.isValid())
        {
            pass = false;
            return;
        }

        Check_src_ip.apply();
    }
}

ebpfFilter(prs(), pipe()) main;
************************\n******** petr4 type checking result: ********\n************************\n
error {
  NoError, PacketTooShort, NoMatch, StackOutOfBounds, HeaderTooShort,
  ParserTimeout, ParserInvalidArgument
}
extern packet_in {
  void extract<T>(out T hdr);
  void extract<T0>(out T0 variableSizeHeader,
                   in bit<32> variableFieldSizeInBits);
  T1 lookahead<T1>();
  void advance(in bit<32> sizeInBits);
  bit<32> length();
}

extern packet_out {
  void emit<T2>(in T2 hdr);
}

extern void verify(in bool check, in error toSignal);
@noWarn("unused")
action NoAction() { 
}
match_kind {
  exact, ternary, lpm
}
extern CounterArray {
  CounterArray(bit<32> max_index, bool sparse);
  void increment(in bit<32> index);
  void add(in bit<32> index, in bit<32> value);
}

extern array_table {
  array_table(bit<32> size);
}

extern hash_table {
  hash_table(bit<32> size);
}

parser parse<H> (packet_in packet, out H headers);
control filter<H3> (inout H3 headers, out bool accept);
package ebpfFilter<H4> (parse<H4> prs, filter<H4> filt);
@ethernetaddress
typedef bit<48> EthernetAddress;
@ipv4address
typedef bit<32> IPv4Address;
header Ethernet_h {
  EthernetAddress dstAddr;
  EthernetAddress srcAddr;
  bit<16> etherType;
}
header IPv4_h {
  bit<4> version;
  bit<4> ihl;
  bit<8> diffserv;
  bit<16> totalLen;
  bit<16> identification;
  bit<3> flags;
  bit<13> fragOffset;
  bit<8> ttl;
  bit<8> protocol;
  bit<16> hdrChecksum;
  IPv4Address srcAddr;
  IPv4Address dstAddr;
}
struct Headers_t {
  Ethernet_h ethernet;
  IPv4_h ipv4;
}
parser prs(packet_in p, out Headers_t headers) {
  state start
    {
    p.extract(headers.ethernet);
    transition select(headers.ethernet.etherType) {
      16w2048: ip;
      default: reject;
    }
  }
  state ip {
    p.extract(headers.ipv4);
    transition accept;
  }
}
control pipe(inout Headers_t headers, out bool pass) {
  action Reject(IPv4Address add)
    {
    pass = false;
    headers.ipv4.srcAddr[31:0] = add[31:16] ++ add[15:0];
  }
  table Check_src_ip
    {
    key = {
      headers.ipv4.srcAddr: exact;
    }
    actions = {
      Reject;NoAction;
    }
    implementation = hash_table(1024);
    const default_action = NoAction;
  }
  apply
    {
    pass = true;
    if (!headers.ipv4.isValid()) {
      pass = false;
      return;
    }
    Check_src_ip.apply();
  }
}
ebpfFilter(prs(), pipe()) main;
************************\n******** p4c type checking result: ********\n************************\n
[--Werror=not-found] error: verify: declaration not found

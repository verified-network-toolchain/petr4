/petr4/ci-test/testdata/p4_16_samples/serenum-expr.p4
\n
#include <core.p4>

#define PORT_SIZE 9
#define FOO_SIZE 7

enum bit<(PORT_SIZE+FOO_SIZE)> EthTypes {
    IPv4 = 0x0800,
    ARP = 0x0806,
    RARP = 0x8035,
    EtherTalk = 0x809B,
    VLAN = 0x8100,
    IPX = 0x8137,
    IPv6 = 0x86DD
}

header Ethernet {
    bit<48> src;
    bit<48> dest;
    EthTypes type;
}

struct Headers {
    Ethernet eth;
}

parser prs(packet_in p, out Headers h) {
    Ethernet e;

    state start {
        p.extract(e);
        transition select(e.type) {
            EthTypes.IPv4: accept;
            EthTypes.ARP: accept;
            default: reject;
        }
    }
}

control c(inout Headers h) {
    apply {
        if (!h.eth.isValid())
            return;
        if (h.eth.type == EthTypes.IPv4)
            h.eth.setInvalid();
        else
            h.eth.type = (EthTypes)(bit<16>)0;
    }
}

parser p<H>(packet_in _p, out H h);
control ctr<H>(inout H h);
package top<H>(p<H> _p, ctr<H> _c);

top(prs(), c()) main;
************************\n******** petr4 type checking result: ********\n************************\n
error {
  NoError, PacketTooShort, NoMatch, StackOutOfBounds, HeaderTooShort,
  ParserTimeout, ParserInvalidArgument
}
extern packet_in {
  void extract<T>(out T hdr);
  void extract<T0>(out T0 variableSizeHeader,
                   in bit<32> variableFieldSizeInBits);
  T1 lookahead<T1>();
  void advance(in bit<32> sizeInBits);
  bit<32> length();
}

extern packet_out {
  void emit<T2>(in T2 hdr);
}

extern void verify(in bool check, in error toSignal);
@noWarn("unused")
action NoAction() { 
}
match_kind {
  exact, ternary, lpm
}
enum bit<(9+7)> EthTypes {
  IPv4 = 2048, 
  ARP = 2054, 
  RARP = 32821, 
  EtherTalk = 32923, 
  VLAN = 33024, 
  IPX = 33079, 
  IPv6 = 34525
}
header Ethernet {
  bit<48> src;
  bit<48> dest;
  EthTypes type;
}
struct Headers {
  Ethernet eth;
}
parser prs(packet_in p, out Headers h) {
  Ethernet e;
  state start
    {
    p.extract(e);
    transition select(e.type) {
      EthTypes.IPv4: accept;
      EthTypes.ARP: accept;
      default: reject;
    }
  }
}
control c(inout Headers h) {
  apply
    {
    if (!h.eth.isValid()) 
      return;
    if (h.eth.type==EthTypes.IPv4)
      
      h.eth.setInvalid();
      else
        h.eth.type = (EthTypes) (bit<16>) 0;
  }
}
parser p<H> (packet_in _p, out H h);
control ctr<H3> (inout H3 h);
package top<H4> (p<H4> _p, ctr<H4> _c);
top(prs(), c()) main;
************************\n******** p4c type checking result: ********\n************************\n
[--Werror=not-found] error: verify: declaration not found

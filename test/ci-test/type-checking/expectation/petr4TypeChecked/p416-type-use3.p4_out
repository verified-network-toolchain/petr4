/petr4/ci-test/testdata/p4_16_samples/p416-type-use3.p4
\n
/*
Copyright 2019 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>


// Naming convention used here:

// D is abbreviation for `typedef`
// T is abbrevation for `type`

// Since types and typedefs can be defined in terms of each other, the
// names I use here contain sequences of Ds and Ts to indicate the
// order in which they have been "stacked", e.g. EthDT_t is a `type`
// (the T is last) defined on type of a `typedef` (the D just before
// the T).

typedef bit<48> EthD_t;
@p4runtime_translation("p4.org/psa/v1/EthT_t", 48)
type    bit<48> EthT_t;

typedef bit<8>     CustomD_t;
type    bit<8>     CustomT_t;
typedef CustomD_t  CustomDD_t;
type    CustomD_t  CustomDT_t;
typedef CustomT_t  CustomTD_t;
type    CustomT_t  CustomTT_t;
typedef CustomDD_t CustomDDD_t;
type    CustomDD_t CustomDDT_t;
typedef CustomDT_t CustomDTD_t;
type    CustomDT_t CustomDTT_t;
typedef CustomTD_t CustomTDD_t;
type    CustomTD_t CustomTDT_t;
typedef CustomTT_t CustomTTD_t;
type    CustomTT_t CustomTTT_t;

header ethernet_t {
    EthD_t  dstAddr;
    EthT_t  srcAddr;
    bit<16> etherType;
}

header custom_t {
    bit<8>      e;
    CustomD_t   ed;
    CustomT_t   et;
    CustomDD_t  edd;
    CustomDT_t  edt;
    CustomTD_t  etd;
    CustomTT_t  ett;
    CustomDDD_t eddd;
    CustomDDT_t eddt;
    CustomDTD_t edtd;
    CustomDTT_t edtt;
    CustomTDD_t etdd;
    CustomTDT_t etdt;
    CustomTTD_t ettd;
    CustomTTT_t ettt;
    bit<16>     checksum;
}

struct meta_t {
}

struct headers_t {
    ethernet_t ethernet;
    custom_t   custom;
}

parser ParserImpl(packet_in packet,
                  out headers_t hdr,
                  inout meta_t meta,
                  inout standard_metadata_t standard_metadata)
{
    const bit<16> ETHERTYPE_CUSTOM = 16w0xDEAD;

    state start {
        transition parse_ethernet;
    }
    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            ETHERTYPE_CUSTOM: parse_custom;
            default: accept;
        }
    }
    state parse_custom {
        packet.extract(hdr.custom);
        transition accept;
    }
}

control ingress(inout headers_t hdr,
                inout meta_t meta,
                inout standard_metadata_t standard_metadata)
{
    action set_output(bit<9> out_port) {
        standard_metadata.egress_spec = out_port;
    }
    action set_headers(bit<8>      e,
                       CustomD_t   ed,
                       CustomT_t   et,
                       CustomDD_t  edd,
                       CustomDT_t  edt,
                       CustomTD_t  etd,
                       CustomTT_t  ett,
                       CustomDDD_t eddd,
                       CustomDDT_t eddt,
                       CustomDTD_t edtd,
                       CustomDTT_t edtt,
                       CustomTDD_t etdd,
                       CustomTDT_t etdt,
                       CustomTTD_t ettd,
                       CustomTTT_t ettt)
    {
        hdr.custom.e = e;
        hdr.custom.ed = ed;
        hdr.custom.et = et;
        hdr.custom.edd = edd;
        hdr.custom.edt = edt;
        hdr.custom.etd = etd;
        hdr.custom.ett = ett;
        hdr.custom.eddd = eddd;
        hdr.custom.eddt = eddt;
        hdr.custom.edtd = edtd;
        hdr.custom.edtt = edtt;
        hdr.custom.etdd = etdd;
        hdr.custom.etdt = etdt;
        hdr.custom.ettd = ettd;
        hdr.custom.ettt = ettt;
    }
    action my_drop() {}

    table custom_table {
        key = {
            hdr.ethernet.srcAddr : exact;
            hdr.ethernet.dstAddr : exact;
            hdr.custom.e         : exact;
            hdr.custom.ed        : exact;
            hdr.custom.et        : exact;
            hdr.custom.edd       : exact;
            hdr.custom.eddt      : exact;
            hdr.custom.edtd      : exact;
            hdr.custom.edtt      : exact;
            hdr.custom.etdd      : exact;
            hdr.custom.etdt      : exact;
            hdr.custom.ettd      : exact;
            hdr.custom.ettt      : exact;
        }
        actions = {
            set_output;
            set_headers;
            my_drop;
        }
        default_action = my_drop;
    }

    apply {
        if (hdr.custom.isValid()) {
            custom_table.apply();
        }
    }
}

control egress(inout headers_t hdr,
               inout meta_t meta,
               inout standard_metadata_t standard_metadata)
{
    apply { }
}

control DeparserImpl(packet_out packet, in headers_t hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.custom);
    }
}

control verifyChecksum(inout headers_t hdr, inout meta_t meta) {
    apply {
        verify_checksum(hdr.custom.isValid(),
            { hdr.custom.e,
                hdr.custom.ed,
                hdr.custom.et,
                hdr.custom.edd,
                hdr.custom.edt,
                hdr.custom.etd,
                hdr.custom.ett,
                hdr.custom.eddd,
                hdr.custom.eddt,
                hdr.custom.edtd,
                hdr.custom.edtt,
                hdr.custom.etdd,
                hdr.custom.etdt,
                hdr.custom.ettd,
                hdr.custom.ettt },
            hdr.custom.checksum, HashAlgorithm.csum16);
    }
}

control computeChecksum(inout headers_t hdr, inout meta_t meta) {
    apply {
        update_checksum(hdr.custom.isValid(),
            { hdr.custom.e,
                hdr.custom.ed,
                hdr.custom.et,
                hdr.custom.edd,
                hdr.custom.edt,
                hdr.custom.etd,
                hdr.custom.ett,
                hdr.custom.eddd,
                hdr.custom.eddt,
                hdr.custom.edtd,
                hdr.custom.edtt,
                hdr.custom.etdd,
                hdr.custom.etdt,
                hdr.custom.ettd,
                hdr.custom.ettt },
            hdr.custom.checksum, HashAlgorithm.csum16);
    }
}

V1Switch(ParserImpl(),
         verifyChecksum(),
         ingress(),
         egress(),
         computeChecksum(),
         DeparserImpl()) main;

************************\n******** petr4 type checking result: ********\n************************\n
error {
  NoError, PacketTooShort, NoMatch, StackOutOfBounds, HeaderTooShort,
  ParserTimeout, ParserInvalidArgument
}
extern packet_in {
  void extract<T>(out T hdr);
  void extract<T0>(out T0 variableSizeHeader,
                   in bit<32> variableFieldSizeInBits);
  T1 lookahead<T1>();
  void advance(in bit<32> sizeInBits);
  bit<32> length();
}

extern packet_out {
  void emit<T2>(in T2 hdr);
}

extern void verify(in bool check, in error toSignal);
@noWarn("unused")
action NoAction() { 
}
match_kind {
  exact, ternary, lpm
}
match_kind {
  range, optional, selector
}
const bit<32> __v1model_version = 20180101;
@metadata
@name("standard_metadata")
struct standard_metadata_t {
  bit<9> ingress_port;
  bit<9> egress_spec;
  bit<9> egress_port;
  bit<32> instance_type;
  bit<32> packet_length;
  @alias("queueing_metadata.enq_timestamp")
  bit<32> enq_timestamp;
  @alias("queueing_metadata.enq_qdepth")
  bit<19> enq_qdepth;
  @alias("queueing_metadata.deq_timedelta")
  bit<32> deq_timedelta;
  @alias("queueing_metadata.deq_qdepth")
  bit<19>
  deq_qdepth;
  @alias("intrinsic_metadata.ingress_global_timestamp")
  bit<48>
  ingress_global_timestamp;
  @alias("intrinsic_metadata.egress_global_timestamp")
  bit<48>
  egress_global_timestamp;
  @alias("intrinsic_metadata.mcast_grp")
  bit<16> mcast_grp;
  @alias("intrinsic_metadata.egress_rid")
  bit<16> egress_rid;
  bit<1> checksum_error;
  error parser_error;
  @alias("intrinsic_metadata.priority")
  bit<3> priority;
}
enum CounterType {
  packets, 
  bytes, 
  packets_and_bytes
}
enum MeterType {
  packets, 
  bytes
}
extern counter {
  counter(bit<32> size, CounterType type);
  void count(in bit<32> index);
}

extern direct_counter {
  direct_counter(CounterType type);
  void count();
}

extern meter {
  meter(bit<32> size, MeterType type);
  void execute_meter<T3>(in bit<32> index, out T3 result);
}

extern direct_meter<T4> {
  direct_meter(MeterType type);
  void read(out T4 result);
}

extern register<T5> {
  register(bit<32> size);
  @noSideEffects
  void read(out T5 result, in bit<32> index);
  void write(in bit<32> index, in T5 value);
}

extern action_profile {
  action_profile(bit<32> size);
}

extern void random<T6>(out T6 result, in T6 lo, in T6 hi);
extern void digest<T7>(in bit<32> receiver, in T7 data);
enum HashAlgorithm {
  crc32, 
  crc32_custom, 
  crc16, 
  crc16_custom, 
  random, 
  identity, 
  csum16, 
  xor16
}
@deprecated("Please use mark_to_drop(standard_metadata) instead.")
extern void mark_to_drop();
@pure
extern void mark_to_drop(inout standard_metadata_t standard_metadata);
@pure
extern void hash<O, T8, D, M>(out O result, in HashAlgorithm algo,
                              in T8 base, in D data, in M max);
extern action_selector {
  action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
  I2E, 
  E2E
}
@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
  Checksum16();
  bit<16> get<D9>(in D9 data);
}

extern void verify_checksum<T10, O11>(in bool condition, in T10 data,
                                      in O11 checksum, HashAlgorithm algo);
@pure
extern void update_checksum<T12, O13>(in bool condition, in T12 data,
                                      inout O13 checksum,
                                      HashAlgorithm algo);
extern void verify_checksum_with_payload<T14, O15>(in bool condition,
                                                   in T14 data,
                                                   in O15 checksum,
                                                   HashAlgorithm algo);
@noSideEffects
extern void update_checksum_with_payload<T16, O17>(in bool condition,
                                                   in T16 data,
                                                   inout O17 checksum,
                                                   HashAlgorithm algo);
extern void clone(in CloneType type, in bit<32> session);
@deprecated("Please use 'resubmit_preserving_field_list' instead")
extern void resubmit<T18>(in T18 data);
extern void resubmit_preserving_field_list(bit<8> index);
@deprecated("Please use 'recirculate_preserving_field_list' instead")
extern void recirculate<T19>(in T19 data);
extern void recirculate_preserving_field_list(bit<8> index);
@deprecated("Please use 'clone_preserving_field_list' instead")
extern void clone3<T20>(in CloneType type, in bit<32> session, in T20 data);
extern void clone_preserving_field_list(in CloneType type,
                                        in bit<32> session, bit<8> index);
extern void truncate(in bit<32> length);
extern void assert(in bool check);
extern void assume(in bool check);
extern void log_msg(string msg);
extern void log_msg<T21>(string msg, in T21 data);
parser Parser<H, M22>
  (packet_in b,
   out H parsedHdr,
   inout M22 meta,
   inout standard_metadata_t standard_metadata);
control VerifyChecksum<H23, M24> (inout H23 hdr, inout M24 meta);
@pipeline
control Ingress<H25, M26>
  (inout H25 hdr, inout M26 meta, inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H27, M28>
  (inout H27 hdr, inout M28 meta, inout standard_metadata_t standard_metadata);
control ComputeChecksum<H29, M30> (inout H29 hdr, inout M30 meta);
@deparser
control Deparser<H31> (packet_out b, in H31 hdr);
package V1Switch<H32, M33>
  (Parser<H32, M33> p,
   VerifyChecksum<H32, M33> vr,
   Ingress<H32, M33> ig,
   Egress<H32, M33> eg,
   ComputeChecksum<H32, M33> ck,
   Deparser<H32> dep);
typedef bit<48> EthD_t;
@p4runtime_translation("p4.org/psa/v1/EthT_t", 48)
  type bit<48> EthT_t;
typedef bit<8> CustomD_t;
type bit<8> CustomT_t;
typedef CustomD_t CustomDD_t;
type CustomD_t CustomDT_t;
typedef CustomT_t CustomTD_t;
type CustomT_t CustomTT_t;
typedef CustomDD_t CustomDDD_t;
type CustomDD_t CustomDDT_t;
typedef CustomDT_t CustomDTD_t;
type CustomDT_t CustomDTT_t;
typedef CustomTD_t CustomTDD_t;
type CustomTD_t CustomTDT_t;
typedef CustomTT_t CustomTTD_t;
type CustomTT_t CustomTTT_t;
header ethernet_t {
  EthD_t dstAddr;
  EthT_t srcAddr;
  bit<16> etherType;
}
header custom_t {
  bit<8> e;
  CustomD_t ed;
  CustomT_t et;
  CustomDD_t edd;
  CustomDT_t edt;
  CustomTD_t etd;
  CustomTT_t ett;
  CustomDDD_t eddd;
  CustomDDT_t eddt;
  CustomDTD_t edtd;
  CustomDTT_t edtt;
  CustomTDD_t etdd;
  CustomTDT_t etdt;
  CustomTTD_t ettd;
  CustomTTT_t ettt;
  bit<16> checksum;
}
struct meta_t {
  
}
struct headers_t {
  ethernet_t ethernet;
  custom_t custom;
}
parser ParserImpl(packet_in packet, out headers_t hdr, inout meta_t meta,
                  inout standard_metadata_t standard_metadata) {
  const bit<16> ETHERTYPE_CUSTOM = 16w57005;
  state start {
    transition parse_ethernet;
  }
  state parse_ethernet
    {
    packet.extract(hdr.ethernet);
    transition select(hdr.ethernet.etherType) {
      ETHERTYPE_CUSTOM: parse_custom;
      default: accept;
    }
  }
  state parse_custom {
    packet.extract(hdr.custom);
    transition accept;
  }
}
control ingress(inout headers_t hdr, inout meta_t meta,
                inout standard_metadata_t standard_metadata) {
  action set_output(bit<9> out_port)
    {
    standard_metadata.egress_spec = out_port;
  }
  action
    set_headers(bit<8> e,
                CustomD_t ed,
                CustomT_t et,
                CustomDD_t edd,
                CustomDT_t edt,
                CustomTD_t etd,
                CustomTT_t ett,
                CustomDDD_t eddd,
                CustomDDT_t eddt,
                CustomDTD_t edtd,
                CustomDTT_t edtt,
                CustomTDD_t etdd,
                CustomTDT_t etdt,
                CustomTTD_t ettd,
                CustomTTT_t ettt)
    {
    hdr.custom.e = e;
    hdr.custom.ed = ed;
    hdr.custom.et = et;
    hdr.custom.edd = edd;
    hdr.custom.edt = edt;
    hdr.custom.etd = etd;
    hdr.custom.ett = ett;
    hdr.custom.eddd = eddd;
    hdr.custom.eddt = eddt;
    hdr.custom.edtd = edtd;
    hdr.custom.edtt = edtt;
    hdr.custom.etdd = etdd;
    hdr.custom.etdt = etdt;
    hdr.custom.ettd = ettd;
    hdr.custom.ettt = ettt;
  }
  action my_drop() { 
  }
  table custom_table
    {
    key =
      {
      hdr.ethernet.srcAddr: exact;
      hdr.ethernet.dstAddr: exact;
      hdr.custom.e: exact;
      hdr.custom.ed: exact;
      hdr.custom.et: exact;
      hdr.custom.edd: exact;
      hdr.custom.eddt: exact;
      hdr.custom.edtd: exact;
      hdr.custom.edtt: exact;
      hdr.custom.etdd: exact;
      hdr.custom.etdt: exact;
      hdr.custom.ettd: exact;
      hdr.custom.ettt: exact;
    }
    actions = {
      set_output;set_headers;my_drop;
    }
    default_action = my_drop;
  }
  apply {
    if (hdr.custom.isValid()) {
      custom_table.apply();
    }
  }
}
control egress(inout headers_t hdr, inout meta_t meta,
               inout standard_metadata_t standard_metadata) {
  apply { 
  }
}
control DeparserImpl(packet_out packet, in headers_t hdr) {
  apply {
    packet.emit(hdr.ethernet);
    packet.emit(hdr.custom);
  }
}
control verifyChecksum(inout headers_t hdr, inout meta_t meta) {
  apply
    {
    verify_checksum(hdr.custom.isValid(),
                      {hdr.custom.e, hdr.custom.ed, hdr.custom.et,
                        hdr.custom.edd, hdr.custom.edt, hdr.custom.etd,
                        hdr.custom.ett, hdr.custom.eddd, hdr.custom.eddt,
                        hdr.custom.edtd, hdr.custom.edtt, hdr.custom.etdd,
                        hdr.custom.etdt, hdr.custom.ettd, hdr.custom.ettt},
                      hdr.custom.checksum, HashAlgorithm.csum16);
  }
}
control computeChecksum(inout headers_t hdr, inout meta_t meta) {
  apply
    {
    update_checksum(hdr.custom.isValid(),
                      {hdr.custom.e, hdr.custom.ed, hdr.custom.et,
                        hdr.custom.edd, hdr.custom.edt, hdr.custom.etd,
                        hdr.custom.ett, hdr.custom.eddd, hdr.custom.eddt,
                        hdr.custom.edtd, hdr.custom.edtt, hdr.custom.etdd,
                        hdr.custom.etdt, hdr.custom.ettd, hdr.custom.ettt},
                      hdr.custom.checksum, HashAlgorithm.csum16);
  }
}
V1Switch(ParserImpl(), verifyChecksum(), ingress(), egress(),
           computeChecksum(), DeparserImpl())
  main;
************************\n******** p4c type checking result: ********\n************************\n
[--Werror=not-found] error: verify: declaration not found
